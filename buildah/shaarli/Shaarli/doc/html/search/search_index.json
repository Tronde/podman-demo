{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shaarli # The personal, minimalist, super-fast, database free, bookmarking service. Do you want to share the links you discover? Shaarli is a minimalist bookmark manager and link sharing service that you can install on your own server. It is designed to be personal (single-user), fast and handy. Visit the pages in the sidebar to find information on how to setup, use, configure, tweak and troubleshoot Shaarli. GitHub project page Documentation Changelog Demo # You can use this public demo instance of Shaarli . It runs the latest development version of Shaarli and is updated/reset daily. Login: demo ; Password: demo Getting started # Configure your server Install Shaarli Or install Shaarli using Docker Features # Shaarli can be used: to share, comment and save interesting links to bookmark useful/frequent links and share them between computers as a minimal blog/microblog/writing platform as a read-it-later/todo list as a notepad to draft and save articles/posts/ideas as a knowledge base to keep notes, documentation and code snippets as a shared clipboard/notepad/pastebin between computers as playlist manager for online media to feed other blogs, aggregators, social networks... Edit, view and search your links # Editable URL, title, description, tags, private/public status for all your Shaares Tags to organize your Shaares Search in all fields Unique permalinks for easy reference Paginated Shaares list view (with image and video thumbnails) Tag cloud/list views Picture wall /thumbnails view (with lazy loading) ATOM and RSS feeds (can also be filtered using tags or text search) Daily : newspaper-like daily digest (and daily RSS feed) URL cleanup: automatic removal of ?utm_source=... , fb=... tracking parameters Extensible through plugins Easily extensible by any client using the REST API exposed by Shaarli Bookmarklet and other tools to share links in one click Responsive/support for mobile browsers, degrades gracefully with Javascript disabled LDAP (single-user) login support Easy setup # Dead-simple installation : drop the files on your server, open the page Shaares are stored in a file (no database required, easy backup ) Configurable from dialog and configuration file Extensible through third-party plugins and themes Fast # Fast! Small datastore file, write-once/read-many, served most of the time from OS disk caches (no disk I/O) Stays fast with even tens of thousands shaares! Self-hosted # Shaarli is an alternative to commercial services such as StumbleUpon, Delicio.us, Diigo... The data is yours, import and export it to HTML bookmarksformat compatible with most web browser, and from a variety of formats Shaarli does not send any telemetry/metrics/private information to developers Shaarli is Free and Open-Source software, inspect and change how the program works in the source code Built-in Security features to help you protect your Shaarli instance About # This community fork of the original Shaarli project by S\u00e9bastien Sauvage (now unmaintained ) has carried on the work to provide many patches for bug fixes and enhancements in this repository, and will keep maintaining the project for the foreseeable future, while keeping Shaarli simple and efficient. The original Shaarli instance is still available here (+25000 shaares!) Contributing and getting help # Feedback is very appreciated! Feel free to propose solutions to existing problems, help us improve the documentation and translations, and submit pull requests :-) See Support to get in touch with the Shaarli community. License # Shaarli is Free Software . See COPYING for a detail of the contributors and licenses for each individual component. A list of contributors is available here .","title":"Home"},{"location":"#shaarli","text":"The personal, minimalist, super-fast, database free, bookmarking service. Do you want to share the links you discover? Shaarli is a minimalist bookmark manager and link sharing service that you can install on your own server. It is designed to be personal (single-user), fast and handy. Visit the pages in the sidebar to find information on how to setup, use, configure, tweak and troubleshoot Shaarli. GitHub project page Documentation Changelog","title":"Shaarli"},{"location":"#demo","text":"You can use this public demo instance of Shaarli . It runs the latest development version of Shaarli and is updated/reset daily. Login: demo ; Password: demo","title":"Demo"},{"location":"#getting-started","text":"Configure your server Install Shaarli Or install Shaarli using Docker","title":"Getting started"},{"location":"#features","text":"Shaarli can be used: to share, comment and save interesting links to bookmark useful/frequent links and share them between computers as a minimal blog/microblog/writing platform as a read-it-later/todo list as a notepad to draft and save articles/posts/ideas as a knowledge base to keep notes, documentation and code snippets as a shared clipboard/notepad/pastebin between computers as playlist manager for online media to feed other blogs, aggregators, social networks...","title":"Features"},{"location":"#edit-view-and-search-your-links","text":"Editable URL, title, description, tags, private/public status for all your Shaares Tags to organize your Shaares Search in all fields Unique permalinks for easy reference Paginated Shaares list view (with image and video thumbnails) Tag cloud/list views Picture wall /thumbnails view (with lazy loading) ATOM and RSS feeds (can also be filtered using tags or text search) Daily : newspaper-like daily digest (and daily RSS feed) URL cleanup: automatic removal of ?utm_source=... , fb=... tracking parameters Extensible through plugins Easily extensible by any client using the REST API exposed by Shaarli Bookmarklet and other tools to share links in one click Responsive/support for mobile browsers, degrades gracefully with Javascript disabled LDAP (single-user) login support","title":"Edit, view and search your links"},{"location":"#easy-setup","text":"Dead-simple installation : drop the files on your server, open the page Shaares are stored in a file (no database required, easy backup ) Configurable from dialog and configuration file Extensible through third-party plugins and themes","title":"Easy setup"},{"location":"#fast","text":"Fast! Small datastore file, write-once/read-many, served most of the time from OS disk caches (no disk I/O) Stays fast with even tens of thousands shaares!","title":"Fast"},{"location":"#self-hosted","text":"Shaarli is an alternative to commercial services such as StumbleUpon, Delicio.us, Diigo... The data is yours, import and export it to HTML bookmarksformat compatible with most web browser, and from a variety of formats Shaarli does not send any telemetry/metrics/private information to developers Shaarli is Free and Open-Source software, inspect and change how the program works in the source code Built-in Security features to help you protect your Shaarli instance","title":"Self-hosted"},{"location":"#about","text":"This community fork of the original Shaarli project by S\u00e9bastien Sauvage (now unmaintained ) has carried on the work to provide many patches for bug fixes and enhancements in this repository, and will keep maintaining the project for the foreseeable future, while keeping Shaarli simple and efficient. The original Shaarli instance is still available here (+25000 shaares!)","title":"About"},{"location":"#contributing-and-getting-help","text":"Feedback is very appreciated! Feel free to propose solutions to existing problems, help us improve the documentation and translations, and submit pull requests :-) See Support to get in touch with the Shaarli community.","title":"Contributing and getting help"},{"location":"#license","text":"Shaarli is Free Software . See COPYING for a detail of the contributors and licenses for each individual component. A list of contributors is available here .","title":"License"},{"location":"Backup-and-restore/","text":"Backup and restore # All data and configuration is kept in the data directory. Backup this directory: rsync -avzP my.server.com:/var/www/shaarli.mydomain.org/data ~/backups/shaarli-data-$(date +%Y-%m-%d_%H%M) It is strongly recommended to do periodic, automatic backups to a separate machine. You can automate the command above using a cron job or full-featured backup solutions such as rsnapshot To restore a backup, simply put back the data/ directory in place, overwriting any existing files.","title":"Backup and restore"},{"location":"Backup-and-restore/#backup-and-restore","text":"All data and configuration is kept in the data directory. Backup this directory: rsync -avzP my.server.com:/var/www/shaarli.mydomain.org/data ~/backups/shaarli-data-$(date +%Y-%m-%d_%H%M) It is strongly recommended to do periodic, automatic backups to a separate machine. You can automate the command above using a cron job or full-featured backup solutions such as rsnapshot To restore a backup, simply put back the data/ directory in place, overwriting any existing files.","title":"Backup and restore"},{"location":"Community-and-related-software/","text":"Community & related software # Unofficial but related work on Shaarli. If you maintain one of these, please get in touch with us to help us find a way to adapt your work to our fork. Related software # REST API clients # See REST API for a list of official and community clients. Third party plugins # autosave by @kalvn : Automatically saves data when editing a Shaare to avoid any loss in case of crash or unexpected shutdown. code-coloration by @ArthurHoaro : client side code syntax highlighter. custom-css by @immanuelfodor - Customize the look and feel of the UI with custom CSS rules disqus by @kalvn : Adds Disqus comment system to your Shaarli. emojione by @immanuelfodor - Resurrected fork of the original emojione project favicons by @trailjeep - Shaarli plugin to add favicon/filetype icons to Shaares. google analytics by @ericjuden : Adds Google Analytics tracking support launch - Launch Plugin is a plugin designed to enhance and customize Launch Theme for Shaarli. markdown-toolbar by @immanuelfodor - Easily insert markdown syntax into the Description field when editing a Shaare. related by @ilesinge - Show related Shaares based on the number of identical tags. shaarli-descriptor by @immanuelfodor - Customize the default height/number of rows of the Description field when editing a Shaare. shaarli2mastodon by @kalvn - This Shaarli plugin allows you to automatically publish links you post on your Mastodon timeline. shaarli2twitter by @ArthurHoaro - Automatically tweet your Shaares from Shaarli social by @alexisju : share links to social networks. urlextern by @trailjeep - Shaarli plugin to open external links in a new tab/window. webhooks by @flow.gunso - Shaarli plugin that enables user-defined callback URL, i.e. webhooks, for specific Shaarli events (link saving, deletion...) Third-party themes # See Theming for a list of community-contributed themes, and an installation guide. Integration with other platforms # tt-rss-shaarli - Tiny-Tiny RSS plugin that adds support for sharing articles with Shaarli octopress-shaarli - Octopress plugin to retrieve Shaarli Shaares on the sidebar Scuttle to Shaarli - Import bookmarks from Scuttle Shaarli app for Cloudron - Effortlessly run Shaarli with the help of Cloudron Shaarli_ynh - Shaarli is available as a Yunohost app pelican static blog generator plugin to auto-post articles on a Shaarli instance: shaarli_poster Mobile apps # ShaarliOS - Apple iOS share extension. Shaarlier for Android - Android application to simply add Shaares directly into your Shaarli via Sharing. Free software. Stakali for Android - Stakali is a personal bookmark manager which synchronizes with Shaarli. Support offline work without instance, sync, browsing within app. Free use of up to 20 results. Shaarli for Android - Android application that adds Shaarli as a sharing provider. Desktop apps # Ulauncher Extension - Ulauncher is an an application launcher for Linux, this extension allows research in your Shaarli Browser extensions # Shaarli Firefox Extension - toolbar button to share your current tab with Shaarli. Shaarli Chrome Extension - toolbar button to share your current tab with Shaarli. Removed from Chrome web store. Add to Shaarli - lets you add the current tab or a note to your Shaarli instance. WebLinks Ext - Save, edit and use your Shaarli. Support work offline, sync, trash, etc. Free software. Server apps # Shaarli Archiver - Shaarli and SingleFile to archive your bookmarks shaarchiver - Archive your Shaarli bookmarks and their content shaarli-river - An aggregator for shaarlis with many features Shaarlo - An aggregator for shaarlis with many features Shaarlimages - An image-oriented aggregator for Shaarlis mknexen/shaarli-api - A REST API for Shaarli Self dead link - Detect dead links on shaarli. This version use the database of shaarli. Another version , can be used for other shaarli instances (but is more resource consuming). Bookmark Archiver - Save an archived copy of all websites starred using browser bookmarks/Shaarli/Delicious/Instapaper/Unmark.it/Pocket/Pinboard. Outputs browseable html. Alternatives to Shaarli # See awesome-selfhosted: bookmarks & link sharing . Community # Liens en vrac de sebsauvage - the original Shaarli A large list of Shaarlis A list of working Shaarli aggregators A list of some known Shaarlis Adieu Delicious, Diigo et StumbleUpon. Salut Shaarli ! - sebsauvage.net (fr) 16/09/2011 - the original post about Shaarli Original ideas/fixme/TODO page Original discussion page (fr) Original revisions history Shaarli.fr/my - Unofficial, unsupported (old fork) hosted Shaarlis provider, courtesy of DMeloni Articles and social media discussions # 2020-04-05 - Hacker News - Self-hosted instance of Shaarli - it is simple, fast and reliable 2016-10-10 - Framasoft - MyFrama : vos favoris partout, avec vous, rien qu\u2019\u00e0 vous ! 2016-09-22 - Hacker News - Shaarli \u2013 Personal, minimalist, database-free, bookmarking service (github.com) 2015-08-15 - Reddit - Question about migrating from WordPress to Shaarli. 2015-06-22 - Hacker News - Shaarli: Self-hosted del.icio.us alternative (sebsauvage.net) 2015-05-12 - Reddit - shaarli - Self hosted Bookmarking / Delicious (PHP, MySQL) 2014-10-15 - OpenSource.com - Five open source alternatives to popular web apps It also appears in the following recommendation lists: - AlternativeTo - FramaLibre - Project Awesome: Selfhosted Bookmarks and Link Sharing","title":"Community and Related software"},{"location":"Community-and-related-software/#community-related-software","text":"Unofficial but related work on Shaarli. If you maintain one of these, please get in touch with us to help us find a way to adapt your work to our fork.","title":"Community &amp; related software"},{"location":"Community-and-related-software/#related-software","text":"","title":"Related software"},{"location":"Community-and-related-software/#rest-api-clients","text":"See REST API for a list of official and community clients.","title":"REST API clients"},{"location":"Community-and-related-software/#third-party-plugins","text":"autosave by @kalvn : Automatically saves data when editing a Shaare to avoid any loss in case of crash or unexpected shutdown. code-coloration by @ArthurHoaro : client side code syntax highlighter. custom-css by @immanuelfodor - Customize the look and feel of the UI with custom CSS rules disqus by @kalvn : Adds Disqus comment system to your Shaarli. emojione by @immanuelfodor - Resurrected fork of the original emojione project favicons by @trailjeep - Shaarli plugin to add favicon/filetype icons to Shaares. google analytics by @ericjuden : Adds Google Analytics tracking support launch - Launch Plugin is a plugin designed to enhance and customize Launch Theme for Shaarli. markdown-toolbar by @immanuelfodor - Easily insert markdown syntax into the Description field when editing a Shaare. related by @ilesinge - Show related Shaares based on the number of identical tags. shaarli-descriptor by @immanuelfodor - Customize the default height/number of rows of the Description field when editing a Shaare. shaarli2mastodon by @kalvn - This Shaarli plugin allows you to automatically publish links you post on your Mastodon timeline. shaarli2twitter by @ArthurHoaro - Automatically tweet your Shaares from Shaarli social by @alexisju : share links to social networks. urlextern by @trailjeep - Shaarli plugin to open external links in a new tab/window. webhooks by @flow.gunso - Shaarli plugin that enables user-defined callback URL, i.e. webhooks, for specific Shaarli events (link saving, deletion...)","title":"Third party plugins"},{"location":"Community-and-related-software/#third-party-themes","text":"See Theming for a list of community-contributed themes, and an installation guide.","title":"Third-party themes"},{"location":"Community-and-related-software/#integration-with-other-platforms","text":"tt-rss-shaarli - Tiny-Tiny RSS plugin that adds support for sharing articles with Shaarli octopress-shaarli - Octopress plugin to retrieve Shaarli Shaares on the sidebar Scuttle to Shaarli - Import bookmarks from Scuttle Shaarli app for Cloudron - Effortlessly run Shaarli with the help of Cloudron Shaarli_ynh - Shaarli is available as a Yunohost app pelican static blog generator plugin to auto-post articles on a Shaarli instance: shaarli_poster","title":"Integration with other platforms"},{"location":"Community-and-related-software/#mobile-apps","text":"ShaarliOS - Apple iOS share extension. Shaarlier for Android - Android application to simply add Shaares directly into your Shaarli via Sharing. Free software. Stakali for Android - Stakali is a personal bookmark manager which synchronizes with Shaarli. Support offline work without instance, sync, browsing within app. Free use of up to 20 results. Shaarli for Android - Android application that adds Shaarli as a sharing provider.","title":"Mobile apps"},{"location":"Community-and-related-software/#desktop-apps","text":"Ulauncher Extension - Ulauncher is an an application launcher for Linux, this extension allows research in your Shaarli","title":"Desktop apps"},{"location":"Community-and-related-software/#browser-extensions","text":"Shaarli Firefox Extension - toolbar button to share your current tab with Shaarli. Shaarli Chrome Extension - toolbar button to share your current tab with Shaarli. Removed from Chrome web store. Add to Shaarli - lets you add the current tab or a note to your Shaarli instance. WebLinks Ext - Save, edit and use your Shaarli. Support work offline, sync, trash, etc. Free software.","title":"Browser extensions"},{"location":"Community-and-related-software/#server-apps","text":"Shaarli Archiver - Shaarli and SingleFile to archive your bookmarks shaarchiver - Archive your Shaarli bookmarks and their content shaarli-river - An aggregator for shaarlis with many features Shaarlo - An aggregator for shaarlis with many features Shaarlimages - An image-oriented aggregator for Shaarlis mknexen/shaarli-api - A REST API for Shaarli Self dead link - Detect dead links on shaarli. This version use the database of shaarli. Another version , can be used for other shaarli instances (but is more resource consuming). Bookmark Archiver - Save an archived copy of all websites starred using browser bookmarks/Shaarli/Delicious/Instapaper/Unmark.it/Pocket/Pinboard. Outputs browseable html.","title":"Server apps"},{"location":"Community-and-related-software/#alternatives-to-shaarli","text":"See awesome-selfhosted: bookmarks & link sharing .","title":"Alternatives to Shaarli"},{"location":"Community-and-related-software/#community","text":"Liens en vrac de sebsauvage - the original Shaarli A large list of Shaarlis A list of working Shaarli aggregators A list of some known Shaarlis Adieu Delicious, Diigo et StumbleUpon. Salut Shaarli ! - sebsauvage.net (fr) 16/09/2011 - the original post about Shaarli Original ideas/fixme/TODO page Original discussion page (fr) Original revisions history Shaarli.fr/my - Unofficial, unsupported (old fork) hosted Shaarlis provider, courtesy of DMeloni","title":"Community"},{"location":"Community-and-related-software/#articles-and-social-media-discussions","text":"2020-04-05 - Hacker News - Self-hosted instance of Shaarli - it is simple, fast and reliable 2016-10-10 - Framasoft - MyFrama : vos favoris partout, avec vous, rien qu\u2019\u00e0 vous ! 2016-09-22 - Hacker News - Shaarli \u2013 Personal, minimalist, database-free, bookmarking service (github.com) 2015-08-15 - Reddit - Question about migrating from WordPress to Shaarli. 2015-06-22 - Hacker News - Shaarli: Self-hosted del.icio.us alternative (sebsauvage.net) 2015-05-12 - Reddit - shaarli - Self hosted Bookmarking / Delicious (PHP, MySQL) 2014-10-15 - OpenSource.com - Five open source alternatives to popular web apps It also appears in the following recommendation lists: - AlternativeTo - FramaLibre - Project Awesome: Selfhosted Bookmarks and Link Sharing","title":"Articles and social media discussions"},{"location":"Docker/","text":"Docker # Docker is an open platform for developing, shipping, and running applications Install Docker # Install Docker , by following the instructions relevant to your OS / distribution, and start the service. For example on Debian : # update your package lists sudo apt update # remove old versions sudo apt-get remove docker docker-engine docker.io containerd runc # install requirements sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common # add docker's GPG signing key curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - # add the repository sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" # install docker engine sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io # Start and enable Docker service sudo systemctl enable docker && sudo systemctl start docker # verify that Docker is properly configured sudo docker run hello-world In order to run Docker commands as a non-root user, you must add the docker group to this user: # Add docker group as secondary group sudo usermod -aG docker your-user # Reboot or logout # Then verify that Docker is properly configured, as \"your-user\" docker run hello-world Get and run a Shaarli image # Shaarli images are available on GitHub Container Registry ghcr.io/shaarli/shaarli : latest : master (development) branch vX.Y.Z : shaarli releases release : always points to the last release stable and master : deprecated . These tags are no longer maintained and may be removed without notice These images are built automatically on Github Actions and rely on: Alpine Linux PHP7-FPM Nginx Additional Dockerfiles are provided for the arm32v7 platform, relying on Linuxserver.io Alpine armhf images . These images must be built using docker build on an arm32v7 machine or using an emulator such as qemu . Here is an example of how to run Shaarli latest image using Docker: # download the 'latest' image from GitHub Container Registry docker pull ghcr.io/shaarli/shaarli # create persistent data volumes/directories on the host docker volume create shaarli-data docker volume create shaarli-cache # create a new container using the Shaarli image # --detach: run the container in background # --name: name of the created container/instance # --publish: map the host's :8000 port to the container's :80 port # --rm: automatically remove the container when it exits # --volume: mount persistent volumes in the container ($volume_name:$volume_mountpoint) docker run --detach \\ --name myshaarli \\ --publish 8000:80 \\ --rm \\ --volume shaarli-data:/var/www/shaarli/data \\ --volume shaarli-cache:/var/www/shaarli/cache \\ ghcr.io/shaarli/shaarli:latest # verify that the container is running docker ps | grep myshaarli # to completely remove the container docker stop myshaarli # stop the running container docker ps | grep myshaarli # verify the container is no longer running docker ps -a | grep myshaarli # verify the container is stopped docker rm myshaarli # destroy the container docker ps -a | grep myshaarli # verify th container has been destroyed After running docker run command, your Shaarli instance should be available on the host machine at localhost:8000 . In order to access your instance through a reverse proxy, we recommend using our Docker Compose build. Docker Compose # A Compose file is a common format for defining and running multi-container Docker applications. A docker-compose.yml file can be used to run a persistent/autostarted shaarli service using Docker Compose or in a Docker stack . Shaarli provides configuration file for Docker Compose, that will setup a Shaarli instance, a Tr\u00e6fik instance (reverse proxy) with Let's Encrypt certificates, a Docker network, and volumes for Shaarli data and Tr\u00e6fik TLS configuration and certificates. Download docker-compose from the release page : $ sudo curl -L \"https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose $ sudo chmod +x /usr/local/bin/docker-compose To run Shaarli container and its reverse proxy, you can execute the following commands: # create a new directory to store the configuration: $ mkdir shaarli && cd shaarli # Download the latest version of Shaarli's docker-compose.yml $ curl -L https://raw.githubusercontent.com/shaarli/Shaarli/latest/docker-compose.yml -o docker-compose.yml # Create the .env file and fill in your VPS and domain information # (replace <shaarli.mydomain.org>, <admin@mydomain.org> and <latest> with your actual information) $ echo 'SHAARLI_VIRTUAL_HOST=shaarli.mydomain.org' > .env $ echo 'SHAARLI_LETSENCRYPT_EMAIL=admin@mydomain.org' >> .env # Available Docker tags can be found at https://github.com/shaarli/Shaarli/pkgs/container/shaarli/versions?filters%5Bversion_type%5D=tagged $ echo 'SHAARLI_DOCKER_TAG=latest' >> .env # Pull the Docker images $ docker-compose pull # Run! $ docker-compose up -d After a few seconds, you should be able to access your Shaarli instance at https://shaarli.mydomain.org (replace your own domain name). Running dockerized Shaarli as a systemd service # It is possible to start a dockerized Shaarli instance as a systemd service (systemd is the service management tool on several distributions). After installing Docker, use the following steps to run your shaarli container Shaarli to run on system start. As root, create /etc/systemd/system/docker.shaarli.service : [Unit] Description=Shaarli Bookmark Manager Container After=docker.service Requires=docker.service [Service] Restart=always # Put any environment you want in an included file, like $host- or $domainname in this example EnvironmentFile=/etc/sysconfig/box-environment # It's just an example.. ExecStart=/usr/bin/docker run \\ -p 28010:80 \\ --name ${hostname}-shaarli \\ --hostname shaarli.${domainname} \\ -v /srv/docker-volumes-local/shaarli-data:/var/www/shaarli/data:rw \\ -v /etc/localtime:/etc/localtime:ro \\ ghcr.io/shaarli/shaarli:latest ExecStop=/usr/bin/docker rm -f ${hostname}-shaarli [Install] WantedBy=multi-user.target # reload systemd services definitions systemctl daemon-reload # start the servie and enable it a boot time systemctl enable docker.shaarli.service --now # verify that the service is running systemctl status docker.* # inspect system log if needed journalctl -f Docker cheatsheet # # pull/update an image $ docker pull ghcr.io/shaarli/shaarli:release # run a container from an image $ docker run ghcr.io/shaarli/shaarli:latest # list available images $ docker images ls # list running containers $ docker ps # list running AND stopped containers $ docker ps -a # run a command in a running container $ docker exec -ti <container-name-or-first-letters-of-id> bash # follow logs of a running container $ docker logs -f <container-name-or-first-letters-of-id> # delete unused images to free up disk space $ docker system prune --images # delete unused volumes to free up disk space (CAUTION all data in unused volumes will be lost) $ docker system prune --volumes # delete unused containers $ docker system prune References # Docker: using volumes Dockerfile best practices Dockerfile reference GitHub Container Registry GithHub Packages documentation DockerHub: Teams and organizations , End of Docker free teams Get Docker CE for Debian Install Docker Compose Interactive Docker training portal on Katakoda Service management: Nginx in the foreground Service management: Using supervisord Volumes Where are Docker images stored? docker create Docker Documentation docker exec docker images docker logs docker logs Docker Overview docker ps docker pull docker run docker-compose logs Tr\u00e6fik: Getting Started , Docker backend , Let's Encrypt , Docker image","title":"Docker"},{"location":"Docker/#docker","text":"Docker is an open platform for developing, shipping, and running applications","title":"Docker"},{"location":"Docker/#install-docker","text":"Install Docker , by following the instructions relevant to your OS / distribution, and start the service. For example on Debian : # update your package lists sudo apt update # remove old versions sudo apt-get remove docker docker-engine docker.io containerd runc # install requirements sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common # add docker's GPG signing key curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - # add the repository sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" # install docker engine sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io # Start and enable Docker service sudo systemctl enable docker && sudo systemctl start docker # verify that Docker is properly configured sudo docker run hello-world In order to run Docker commands as a non-root user, you must add the docker group to this user: # Add docker group as secondary group sudo usermod -aG docker your-user # Reboot or logout # Then verify that Docker is properly configured, as \"your-user\" docker run hello-world","title":"Install Docker"},{"location":"Docker/#get-and-run-a-shaarli-image","text":"Shaarli images are available on GitHub Container Registry ghcr.io/shaarli/shaarli : latest : master (development) branch vX.Y.Z : shaarli releases release : always points to the last release stable and master : deprecated . These tags are no longer maintained and may be removed without notice These images are built automatically on Github Actions and rely on: Alpine Linux PHP7-FPM Nginx Additional Dockerfiles are provided for the arm32v7 platform, relying on Linuxserver.io Alpine armhf images . These images must be built using docker build on an arm32v7 machine or using an emulator such as qemu . Here is an example of how to run Shaarli latest image using Docker: # download the 'latest' image from GitHub Container Registry docker pull ghcr.io/shaarli/shaarli # create persistent data volumes/directories on the host docker volume create shaarli-data docker volume create shaarli-cache # create a new container using the Shaarli image # --detach: run the container in background # --name: name of the created container/instance # --publish: map the host's :8000 port to the container's :80 port # --rm: automatically remove the container when it exits # --volume: mount persistent volumes in the container ($volume_name:$volume_mountpoint) docker run --detach \\ --name myshaarli \\ --publish 8000:80 \\ --rm \\ --volume shaarli-data:/var/www/shaarli/data \\ --volume shaarli-cache:/var/www/shaarli/cache \\ ghcr.io/shaarli/shaarli:latest # verify that the container is running docker ps | grep myshaarli # to completely remove the container docker stop myshaarli # stop the running container docker ps | grep myshaarli # verify the container is no longer running docker ps -a | grep myshaarli # verify the container is stopped docker rm myshaarli # destroy the container docker ps -a | grep myshaarli # verify th container has been destroyed After running docker run command, your Shaarli instance should be available on the host machine at localhost:8000 . In order to access your instance through a reverse proxy, we recommend using our Docker Compose build.","title":"Get and run a Shaarli image"},{"location":"Docker/#docker-compose","text":"A Compose file is a common format for defining and running multi-container Docker applications. A docker-compose.yml file can be used to run a persistent/autostarted shaarli service using Docker Compose or in a Docker stack . Shaarli provides configuration file for Docker Compose, that will setup a Shaarli instance, a Tr\u00e6fik instance (reverse proxy) with Let's Encrypt certificates, a Docker network, and volumes for Shaarli data and Tr\u00e6fik TLS configuration and certificates. Download docker-compose from the release page : $ sudo curl -L \"https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose $ sudo chmod +x /usr/local/bin/docker-compose To run Shaarli container and its reverse proxy, you can execute the following commands: # create a new directory to store the configuration: $ mkdir shaarli && cd shaarli # Download the latest version of Shaarli's docker-compose.yml $ curl -L https://raw.githubusercontent.com/shaarli/Shaarli/latest/docker-compose.yml -o docker-compose.yml # Create the .env file and fill in your VPS and domain information # (replace <shaarli.mydomain.org>, <admin@mydomain.org> and <latest> with your actual information) $ echo 'SHAARLI_VIRTUAL_HOST=shaarli.mydomain.org' > .env $ echo 'SHAARLI_LETSENCRYPT_EMAIL=admin@mydomain.org' >> .env # Available Docker tags can be found at https://github.com/shaarli/Shaarli/pkgs/container/shaarli/versions?filters%5Bversion_type%5D=tagged $ echo 'SHAARLI_DOCKER_TAG=latest' >> .env # Pull the Docker images $ docker-compose pull # Run! $ docker-compose up -d After a few seconds, you should be able to access your Shaarli instance at https://shaarli.mydomain.org (replace your own domain name).","title":"Docker Compose"},{"location":"Docker/#running-dockerized-shaarli-as-a-systemd-service","text":"It is possible to start a dockerized Shaarli instance as a systemd service (systemd is the service management tool on several distributions). After installing Docker, use the following steps to run your shaarli container Shaarli to run on system start. As root, create /etc/systemd/system/docker.shaarli.service : [Unit] Description=Shaarli Bookmark Manager Container After=docker.service Requires=docker.service [Service] Restart=always # Put any environment you want in an included file, like $host- or $domainname in this example EnvironmentFile=/etc/sysconfig/box-environment # It's just an example.. ExecStart=/usr/bin/docker run \\ -p 28010:80 \\ --name ${hostname}-shaarli \\ --hostname shaarli.${domainname} \\ -v /srv/docker-volumes-local/shaarli-data:/var/www/shaarli/data:rw \\ -v /etc/localtime:/etc/localtime:ro \\ ghcr.io/shaarli/shaarli:latest ExecStop=/usr/bin/docker rm -f ${hostname}-shaarli [Install] WantedBy=multi-user.target # reload systemd services definitions systemctl daemon-reload # start the servie and enable it a boot time systemctl enable docker.shaarli.service --now # verify that the service is running systemctl status docker.* # inspect system log if needed journalctl -f","title":"Running dockerized Shaarli as a systemd service"},{"location":"Docker/#docker-cheatsheet","text":"# pull/update an image $ docker pull ghcr.io/shaarli/shaarli:release # run a container from an image $ docker run ghcr.io/shaarli/shaarli:latest # list available images $ docker images ls # list running containers $ docker ps # list running AND stopped containers $ docker ps -a # run a command in a running container $ docker exec -ti <container-name-or-first-letters-of-id> bash # follow logs of a running container $ docker logs -f <container-name-or-first-letters-of-id> # delete unused images to free up disk space $ docker system prune --images # delete unused volumes to free up disk space (CAUTION all data in unused volumes will be lost) $ docker system prune --volumes # delete unused containers $ docker system prune","title":"Docker cheatsheet"},{"location":"Docker/#references","text":"Docker: using volumes Dockerfile best practices Dockerfile reference GitHub Container Registry GithHub Packages documentation DockerHub: Teams and organizations , End of Docker free teams Get Docker CE for Debian Install Docker Compose Interactive Docker training portal on Katakoda Service management: Nginx in the foreground Service management: Using supervisord Volumes Where are Docker images stored? docker create Docker Documentation docker exec docker images docker logs docker logs Docker Overview docker ps docker pull docker run docker-compose logs Tr\u00e6fik: Getting Started , Docker backend , Let's Encrypt , Docker image","title":"References"},{"location":"Installation/","text":"Installation # Once your server is configured , install Shaarli: From release ZIP # To install Shaarli, simply place the files from the latest release .zip archive under your webserver's document root (directly at the document root, or in a subdirectory). Download the shaarli-vX.X.X-full archive to include dependencies. wget https://github.com/shaarli/Shaarli/releases/download/v0.11.1/shaarli-v0.11.1-full.zip unzip shaarli-v0.11.1-full.zip sudo rsync -avP Shaarli/ /var/www/shaarli.mydomain.org/ From sources # These components are required to build Shaarli: Composer to manage third-party PHP dependencies . yarn to build frontend dependencies. python3-virtualenv to build local HTML documentation. # example from a Debian-based build machine sudo apt install composer yarnpkg python3-virtualenv Clone the repository, either pointing to: any tagged release latest : the latest tagged release master : development branch # clone the branch/tag of your choice $ git clone -b latest https://github.com/shaarli/Shaarli.git /home/me/Shaarli # OR download/extract the tar.gz/zip: wget https://github.com/shaarli/Shaarli/archive/latest.tar.gz... # enter the directory $ cd /home/me/Shaarli # install 3rd-party PHP dependencies $ composer install --no-dev --prefer-dist # build frontend static assets $ make build_frontend # build translations $ make translate # build HTML documentation $ make htmldoc # copy the resulting shaarli directory under your webserver's document root $ rsync -avP /home/me/Shaarli/ /var/www/shaarli.mydomain.org/ Set file permissions # Regardless of the installation method, appropriate file permissions must be set: sudo chown -R root:www-data /var/www/shaarli.mydomain.org sudo chmod -R g+rX /var/www/shaarli.mydomain.org sudo chmod -R g+rwX /var/www/shaarli.mydomain.org/{cache/,data/,pagecache/,tmp/} Using Docker # See the documentation Finish Installation # Once Shaarli is downloaded and files have been placed at the correct location, open this location your web browser. Enter basic settings for your Shaarli installation, and it's ready to use! Congratulations! Your Shaarli is now available at https://shaarli.mydomain.org . You can further configure Shaarli , setup Plugins or additional software . Upgrading Shaarli # See Upgrade and Migration","title":"Installation"},{"location":"Installation/#installation","text":"Once your server is configured , install Shaarli:","title":"Installation"},{"location":"Installation/#from-release-zip","text":"To install Shaarli, simply place the files from the latest release .zip archive under your webserver's document root (directly at the document root, or in a subdirectory). Download the shaarli-vX.X.X-full archive to include dependencies. wget https://github.com/shaarli/Shaarli/releases/download/v0.11.1/shaarli-v0.11.1-full.zip unzip shaarli-v0.11.1-full.zip sudo rsync -avP Shaarli/ /var/www/shaarli.mydomain.org/","title":"From release ZIP"},{"location":"Installation/#from-sources","text":"These components are required to build Shaarli: Composer to manage third-party PHP dependencies . yarn to build frontend dependencies. python3-virtualenv to build local HTML documentation. # example from a Debian-based build machine sudo apt install composer yarnpkg python3-virtualenv Clone the repository, either pointing to: any tagged release latest : the latest tagged release master : development branch # clone the branch/tag of your choice $ git clone -b latest https://github.com/shaarli/Shaarli.git /home/me/Shaarli # OR download/extract the tar.gz/zip: wget https://github.com/shaarli/Shaarli/archive/latest.tar.gz... # enter the directory $ cd /home/me/Shaarli # install 3rd-party PHP dependencies $ composer install --no-dev --prefer-dist # build frontend static assets $ make build_frontend # build translations $ make translate # build HTML documentation $ make htmldoc # copy the resulting shaarli directory under your webserver's document root $ rsync -avP /home/me/Shaarli/ /var/www/shaarli.mydomain.org/","title":"From sources"},{"location":"Installation/#set-file-permissions","text":"Regardless of the installation method, appropriate file permissions must be set: sudo chown -R root:www-data /var/www/shaarli.mydomain.org sudo chmod -R g+rX /var/www/shaarli.mydomain.org sudo chmod -R g+rwX /var/www/shaarli.mydomain.org/{cache/,data/,pagecache/,tmp/}","title":"Set file permissions"},{"location":"Installation/#using-docker","text":"See the documentation","title":"Using Docker"},{"location":"Installation/#finish-installation","text":"Once Shaarli is downloaded and files have been placed at the correct location, open this location your web browser. Enter basic settings for your Shaarli installation, and it's ready to use! Congratulations! Your Shaarli is now available at https://shaarli.mydomain.org . You can further configure Shaarli , setup Plugins or additional software .","title":"Finish Installation"},{"location":"Installation/#upgrading-shaarli","text":"See Upgrade and Migration","title":"Upgrading Shaarli"},{"location":"Plugins/","text":"Plugins # Installation # For plugins shipped with Shaarli, no installation is required. If you want to install a third party plugin, download it to the plugins directory in Shaarli's installation folder: # example directory structure | index.php | plugins/ |---| custom_plugin/ | |---| custom_plugin.php | |---| ... Make sure your webserver can read and write the files in your plugin folder. Configuration # From Shaarli's administration page ( Tools link), go to Plugin administration . Here you can enable and disable all plugins available, and configure them. Order # In the plugin administration page, you can move enabled plugins to the top or bottom of the list. The first plugins in the list will be processed first. This is important in case plugins depend on each other. Read plugins READMEs for more information. Use case : The (non existent) plugin shaares_footer adds a footer to every shaare in Markdown syntax. It needs to be processed before (higher in the list) the Markdown plugin. Otherwise its syntax won't be translated in HTML. Configuration file # Enabled plugins are stored in your Configuration file . Usage # Official plugins # Usage of each plugin is documented in it's README file: addlink-toolbar : Adds the addlink input on the Shaares list page archiveorg : For each Shaare, add a link to the archived page on Archive.org default_colors : Override default theme colors. isso : Let visitor comment your shaares on permalinks with Isso. piwik : A plugin that adds Piwik tracking code to Shaarli pages. playvideos : Add a button in the toolbar allowing to watch all videos. pubsubhubbub : Enable PubSubHubbub feed publishing qrcode : For each Shaare, add a QRCode icon. readitlater : Mark bookmarks to read them later, with bookmark list highlight and filter. wallabag : For each Shaare, add a Wallabag icon to save it in your instance. Third party plugins # See Community & related software","title":"Plugins"},{"location":"Plugins/#plugins","text":"","title":"Plugins"},{"location":"Plugins/#installation","text":"For plugins shipped with Shaarli, no installation is required. If you want to install a third party plugin, download it to the plugins directory in Shaarli's installation folder: # example directory structure | index.php | plugins/ |---| custom_plugin/ | |---| custom_plugin.php | |---| ... Make sure your webserver can read and write the files in your plugin folder.","title":"Installation"},{"location":"Plugins/#configuration","text":"From Shaarli's administration page ( Tools link), go to Plugin administration . Here you can enable and disable all plugins available, and configure them.","title":"Configuration"},{"location":"Plugins/#order","text":"In the plugin administration page, you can move enabled plugins to the top or bottom of the list. The first plugins in the list will be processed first. This is important in case plugins depend on each other. Read plugins READMEs for more information. Use case : The (non existent) plugin shaares_footer adds a footer to every shaare in Markdown syntax. It needs to be processed before (higher in the list) the Markdown plugin. Otherwise its syntax won't be translated in HTML.","title":"Order"},{"location":"Plugins/#configuration-file","text":"Enabled plugins are stored in your Configuration file .","title":"Configuration file"},{"location":"Plugins/#usage","text":"","title":"Usage"},{"location":"Plugins/#official-plugins","text":"Usage of each plugin is documented in it's README file: addlink-toolbar : Adds the addlink input on the Shaares list page archiveorg : For each Shaare, add a link to the archived page on Archive.org default_colors : Override default theme colors. isso : Let visitor comment your shaares on permalinks with Isso. piwik : A plugin that adds Piwik tracking code to Shaarli pages. playvideos : Add a button in the toolbar allowing to watch all videos. pubsubhubbub : Enable PubSubHubbub feed publishing qrcode : For each Shaare, add a QRCode icon. readitlater : Mark bookmarks to read them later, with bookmark list highlight and filter. wallabag : For each Shaare, add a Wallabag icon to save it in your instance.","title":"Official plugins"},{"location":"Plugins/#third-party-plugins","text":"See Community & related software","title":"Third party plugins"},{"location":"REST-API/","text":"REST API # Server requirements # See the REST API documentation for a list of available endpoints and parameters. Please ensure that your server meets the requirements and is properly configured : URL rewriting is enabled (see specific Apache and Nginx sections) the server's timezone is properly defined the server's clock is synchronized with NTP The host where the API client is invoked should also be synchronized with NTP, see payload/token expiration Clients and examples # python-shaarli-client - the reference API client ( Documentation ) shaarli-client - NodeJs client ( source code ) by laBecasse Android client example with Kotlin by Braincoke This example uses the PHP cURL library. <?php $baseUrl = 'https://shaarli.mydomain.net'; $secret = 'thats_my_api_secret'; function base64url_encode($data) { return rtrim(strtr(base64_encode($data), '+/', '-_'), '='); } function generateToken($secret) { $header = base64url_encode('{ \"typ\": \"JWT\", \"alg\": \"HS512\" }'); $payload = base64url_encode('{ \"iat\": '. time() .' }'); $signature = base64url_encode(hash_hmac('sha512', $header .'.'. $payload , $secret, true)); return $header . '.' . $payload . '.' . $signature; } function getInfo($baseUrl, $secret) { $token = generateToken($secret); $endpoint = rtrim($baseUrl, '/') . '/api/v1/info'; $headers = [ 'Content-Type: text/plain; charset=UTF-8', 'Authorization: Bearer ' . $token, ]; $ch = curl_init($endpoint); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_AUTOREFERER, 1); curl_setopt($ch, CURLOPT_FRESH_CONNECT, 1); $result = curl_exec($ch); curl_close($ch); return $result; } var_dump(getInfo($baseUrl, $secret)); Implementation # Authentication # All requests to Shaarli's API must include a JWT token to verify their authenticity. This token must be included as an HTTP header called Authorization: Bearer <jwt token> . JWT tokens are composed by three parts, separated by a dot . and encoded in base64: [header].[payload].[signature] Header # Shaarli only allow one hash algorithm, so the header will always be the same: { \"typ\": \"JWT\", \"alg\": \"HS512\" } Encoded in base64, it gives: ewogICAgICAgICJ0eXAiOiAiSldUIiwKICAgICAgICAiYWxnIjogIkhTNTEyIgogICAgfQ== Payload # Token expiration: To avoid infinite token validity, JWT tokens must include their creation date in UNIX timestamp format (timezone independent - UTC) under the key iat (issued at) field ( 1 ). This token will be valid during 9 minutes . { \"iat\": 1468663519 } Signature # The signature authenticates the token validity. It contains the base64 of the header and the body, separated by a dot . , hashed in SHA512 with the API secret available in Shaarli administration page. Example signature with PHP: $content = base64_encode($header) . '.' . base64_encode($payload); $signature = hash_hmac('sha512', $content, $secret); Troubleshooting # Debug mode # This should never be used in a production environment. For security reasons, authentication issues will always return an HTTP 401 error code without any detail. It is possible to enable the debug mode in config.json.php to get the actual error message in the HTTP response body with: { \"dev\": { \"debug\": true } } References # jwt.io (including a list of client per language). RFC - JSON Web Token (JWT) JSON Web Tokens (JWT) vs Sessions , HackerNews thread","title":"REST API"},{"location":"REST-API/#rest-api","text":"","title":"REST API"},{"location":"REST-API/#server-requirements","text":"See the REST API documentation for a list of available endpoints and parameters. Please ensure that your server meets the requirements and is properly configured : URL rewriting is enabled (see specific Apache and Nginx sections) the server's timezone is properly defined the server's clock is synchronized with NTP The host where the API client is invoked should also be synchronized with NTP, see payload/token expiration","title":"Server requirements"},{"location":"REST-API/#clients-and-examples","text":"python-shaarli-client - the reference API client ( Documentation ) shaarli-client - NodeJs client ( source code ) by laBecasse Android client example with Kotlin by Braincoke This example uses the PHP cURL library. <?php $baseUrl = 'https://shaarli.mydomain.net'; $secret = 'thats_my_api_secret'; function base64url_encode($data) { return rtrim(strtr(base64_encode($data), '+/', '-_'), '='); } function generateToken($secret) { $header = base64url_encode('{ \"typ\": \"JWT\", \"alg\": \"HS512\" }'); $payload = base64url_encode('{ \"iat\": '. time() .' }'); $signature = base64url_encode(hash_hmac('sha512', $header .'.'. $payload , $secret, true)); return $header . '.' . $payload . '.' . $signature; } function getInfo($baseUrl, $secret) { $token = generateToken($secret); $endpoint = rtrim($baseUrl, '/') . '/api/v1/info'; $headers = [ 'Content-Type: text/plain; charset=UTF-8', 'Authorization: Bearer ' . $token, ]; $ch = curl_init($endpoint); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_AUTOREFERER, 1); curl_setopt($ch, CURLOPT_FRESH_CONNECT, 1); $result = curl_exec($ch); curl_close($ch); return $result; } var_dump(getInfo($baseUrl, $secret));","title":"Clients and examples"},{"location":"REST-API/#implementation","text":"","title":"Implementation"},{"location":"REST-API/#authentication","text":"All requests to Shaarli's API must include a JWT token to verify their authenticity. This token must be included as an HTTP header called Authorization: Bearer <jwt token> . JWT tokens are composed by three parts, separated by a dot . and encoded in base64: [header].[payload].[signature]","title":"Authentication"},{"location":"REST-API/#header","text":"Shaarli only allow one hash algorithm, so the header will always be the same: { \"typ\": \"JWT\", \"alg\": \"HS512\" } Encoded in base64, it gives: ewogICAgICAgICJ0eXAiOiAiSldUIiwKICAgICAgICAiYWxnIjogIkhTNTEyIgogICAgfQ==","title":"Header"},{"location":"REST-API/#payload","text":"Token expiration: To avoid infinite token validity, JWT tokens must include their creation date in UNIX timestamp format (timezone independent - UTC) under the key iat (issued at) field ( 1 ). This token will be valid during 9 minutes . { \"iat\": 1468663519 }","title":"Payload"},{"location":"REST-API/#signature","text":"The signature authenticates the token validity. It contains the base64 of the header and the body, separated by a dot . , hashed in SHA512 with the API secret available in Shaarli administration page. Example signature with PHP: $content = base64_encode($header) . '.' . base64_encode($payload); $signature = hash_hmac('sha512', $content, $secret);","title":"Signature"},{"location":"REST-API/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"REST-API/#debug-mode","text":"This should never be used in a production environment. For security reasons, authentication issues will always return an HTTP 401 error code without any detail. It is possible to enable the debug mode in config.json.php to get the actual error message in the HTTP response body with: { \"dev\": { \"debug\": true } }","title":"Debug mode"},{"location":"REST-API/#references","text":"jwt.io (including a list of client per language). RFC - JSON Web Token (JWT) JSON Web Tokens (JWT) vs Sessions , HackerNews thread","title":"References"},{"location":"Reverse-proxy/","text":"Reverse proxy # If Shaarli is hosted on a server behind a reverse proxy (i.e. there is a proxy server between clients and the web server hosting Shaarli), configure it accordingly. See Reverse proxy configuration. In this example: The Shaarli application server exposes port 10080 to the proxy (for example docker container started with --publish 127.0.0.1:10080:80 ). The Shaarli application server runs at 127.0.0.1 (container). Replace with the server's IP address if running on a different machine. Shaarli's Fully Qualified Domain Name (FQDN) is shaarli.mydomain.org . No HTTPS is setup on the application server, SSL termination is done at the reverse proxy. In your Shaarli configuration data/config.json.php , add the public IP of your proxy under security.trusted_proxies . See also proxy-related issues. Apache # <VirtualHost *:80> ServerName shaarli.mydomain.org # For SSL/TLS certificates acquired with certbot or self-signed certificates # Redirect HTTP requests to HTTPS, except Let's Encrypt ACME challenge requests RewriteEngine on RewriteRule ^.well-known/acme-challenge/ - [L] RewriteCond %{HTTP_HOST} =shaarli.mydomain.org RewriteRule ^ https://shaarli.mydomain.org%{REQUEST_URI} [END,NE,R=permanent] </VirtualHost> # SSL/TLS configuration for Let's Encrypt certificates managed with mod_md #MDomain shaarli.mydomain.org #MDCertificateAgreement accepted #MDContactEmail admin@shaarli.mydomain.org #MDPrivateKeys RSA 4096 <VirtualHost *:443> ServerName shaarli.mydomain.org # SSL/TLS configuration for Let's Encrypt certificates acquired with certbot standalone SSLEngine on SSLCertificateFile /etc/letsencrypt/live/shaarli.mydomain.org/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/shaarli.mydomain.org/privkey.pem # Let's Encrypt settings from https://github.com/certbot/certbot/blob/master/certbot-apache/certbot_apache/_internal/tls_configs/current-options-ssl-apache.conf SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1 SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 SSLHonorCipherOrder off SSLSessionTickets off SSLOptions +StrictRequire # SSL/TLS configuration for self-signed certificates #SSLEngine on #SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem #SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key # let the proxied shaarli server/container know HTTPS URLs should be served RequestHeader set X-Forwarded-Proto \"https\" # send the original SERVER_NAME to the proxied host ProxyPreserveHost On # pass requests to the proxied host # sets X-Forwarded-For, X-Forwarded-Host and X-Forwarded-Server headers ProxyPass / http://127.0.0.1:10080/ ProxyPassReverse / http://127.0.0.1:10080/ </VirtualHost> HAProxy # global [...] defaults [...] frontend http-in bind :80 redirect scheme https code 301 if !{ ssl_fc } bind :443 ssl crt /path/to/cert.pem default_backend shaarli backend shaarli mode http option http-server-close option forwardfor reqadd X-Forwarded-Proto: https server shaarli1 127.0.0.1:10080 HAProxy documentation Nginx # http { [...] index index.html index.php; root /home/john/web; access_log /var/log/nginx/access.log combined; error_log /var/log/nginx/error.log; server { listen 80; server_name shaarli.mydomain.org; # redirect HTTP to HTTPS return 301 https://shaarli.mydomain.org$request_uri; } server { listen 443 ssl http2; server_name shaarli.mydomain.org; ssl_certificate /path/to/certificate ssl_certificate_key /path/to/private/key # if shaarli is installed in a subdirectory of the main domain, edit the location accordingly location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Host $host; # pass requests to the proxied host proxy_pass http://localhost:10080/; proxy_set_header Host $host; proxy_connect_timeout 30s; proxy_read_timeout 120s; } } } References # X-Forwarded-Proto X-Forwarded-Host X-Forwarded-For","title":"Reverse Proxy"},{"location":"Reverse-proxy/#reverse-proxy","text":"If Shaarli is hosted on a server behind a reverse proxy (i.e. there is a proxy server between clients and the web server hosting Shaarli), configure it accordingly. See Reverse proxy configuration. In this example: The Shaarli application server exposes port 10080 to the proxy (for example docker container started with --publish 127.0.0.1:10080:80 ). The Shaarli application server runs at 127.0.0.1 (container). Replace with the server's IP address if running on a different machine. Shaarli's Fully Qualified Domain Name (FQDN) is shaarli.mydomain.org . No HTTPS is setup on the application server, SSL termination is done at the reverse proxy. In your Shaarli configuration data/config.json.php , add the public IP of your proxy under security.trusted_proxies . See also proxy-related issues.","title":"Reverse proxy"},{"location":"Reverse-proxy/#apache","text":"<VirtualHost *:80> ServerName shaarli.mydomain.org # For SSL/TLS certificates acquired with certbot or self-signed certificates # Redirect HTTP requests to HTTPS, except Let's Encrypt ACME challenge requests RewriteEngine on RewriteRule ^.well-known/acme-challenge/ - [L] RewriteCond %{HTTP_HOST} =shaarli.mydomain.org RewriteRule ^ https://shaarli.mydomain.org%{REQUEST_URI} [END,NE,R=permanent] </VirtualHost> # SSL/TLS configuration for Let's Encrypt certificates managed with mod_md #MDomain shaarli.mydomain.org #MDCertificateAgreement accepted #MDContactEmail admin@shaarli.mydomain.org #MDPrivateKeys RSA 4096 <VirtualHost *:443> ServerName shaarli.mydomain.org # SSL/TLS configuration for Let's Encrypt certificates acquired with certbot standalone SSLEngine on SSLCertificateFile /etc/letsencrypt/live/shaarli.mydomain.org/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/shaarli.mydomain.org/privkey.pem # Let's Encrypt settings from https://github.com/certbot/certbot/blob/master/certbot-apache/certbot_apache/_internal/tls_configs/current-options-ssl-apache.conf SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1 SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 SSLHonorCipherOrder off SSLSessionTickets off SSLOptions +StrictRequire # SSL/TLS configuration for self-signed certificates #SSLEngine on #SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem #SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key # let the proxied shaarli server/container know HTTPS URLs should be served RequestHeader set X-Forwarded-Proto \"https\" # send the original SERVER_NAME to the proxied host ProxyPreserveHost On # pass requests to the proxied host # sets X-Forwarded-For, X-Forwarded-Host and X-Forwarded-Server headers ProxyPass / http://127.0.0.1:10080/ ProxyPassReverse / http://127.0.0.1:10080/ </VirtualHost>","title":"Apache"},{"location":"Reverse-proxy/#haproxy","text":"global [...] defaults [...] frontend http-in bind :80 redirect scheme https code 301 if !{ ssl_fc } bind :443 ssl crt /path/to/cert.pem default_backend shaarli backend shaarli mode http option http-server-close option forwardfor reqadd X-Forwarded-Proto: https server shaarli1 127.0.0.1:10080 HAProxy documentation","title":"HAProxy"},{"location":"Reverse-proxy/#nginx","text":"http { [...] index index.html index.php; root /home/john/web; access_log /var/log/nginx/access.log combined; error_log /var/log/nginx/error.log; server { listen 80; server_name shaarli.mydomain.org; # redirect HTTP to HTTPS return 301 https://shaarli.mydomain.org$request_uri; } server { listen 443 ssl http2; server_name shaarli.mydomain.org; ssl_certificate /path/to/certificate ssl_certificate_key /path/to/private/key # if shaarli is installed in a subdirectory of the main domain, edit the location accordingly location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Host $host; # pass requests to the proxied host proxy_pass http://localhost:10080/; proxy_set_header Host $host; proxy_connect_timeout 30s; proxy_read_timeout 120s; } } }","title":"Nginx"},{"location":"Reverse-proxy/#references","text":"X-Forwarded-Proto X-Forwarded-Host X-Forwarded-For","title":"References"},{"location":"Server-configuration/","text":"Server configuration # Requirements # Operating system and web server # Shaarli can be hosted on dedicated/virtual servers, or shared hosting. You need write access to the Shaarli installation directory - you should have received instructions from your hosting provider on how to connect to the server using SSH (or FTP for shared hosts). Examples in this documentation are given for Debian , a GNU/Linux distribution widely used in server environments. Please adapt them to your specific Linux distribution. A $5/month VPS (1 CPU, 1 GiB RAM and 25 GiB SSD) will run any Shaarli installation without problems. Some hosting providers: DigitalOcean ( 1 , 2 , 3 , 4 , 5 , 6 ), Gandi , OVH , RackSpace , etc. Network and domain name # Try to host the server in a region that is geographically close to your users. A domain name ( DNS record ) pointing to the server's public IP address is required to obtain a SSL/TLS certificate and setup HTTPS to secure client traffic to your Shaarli instance. You can obtain a domain name from a registrar ( 1 , 2 ), or from free subdomain providers ( 1 ). If you don't have a domain name, please set up a private domain name ( FQDN ) in your clients' hosts files to access the server (direct access by IP address can result in unexpected behavior). Setup a firewall (using iptables , ufw , fireHOL or any frontend of your choice) to deny all incoming traffic except tcp/80 and tcp/443 , which are needed to access the web server (and any other posrts you might need, like SSH). If the server is in a private network behind a NAT, ensure these ports are forwarded to the server. Shaarli makes outbound HTTP/HTTPS connections to websites you bookmark to fetch page information (title, thumbnails), the server must then have access to the Internet as well, and a working DNS resolver. Screencast # Here is a screencast of the installation procedure PHP # Supported PHP versions: Version Status Shaarli compatibility 8.1 Supported Yes 8.0 EOL: 2023-11-26 Yes 7.4 EOL: 2022-11-28 Yes 7.3 EOL: 2021-12-06 Yes (up to Shaarli 0.12.1) 7.2 EOL: 2020-11-30 Yes (up to Shaarli 0.12.1) 7.1 EOL: 2019-12-01 Yes (up to Shaarli 0.12.1) 7.0 EOL: 2018-12-03 Yes (up to Shaarli 0.10.x) 5.6 EOL: 2018-12-31 Yes (up to Shaarli 0.10.x) 5.5 EOL: 2016-07-10 Yes 5.4 EOL: 2015-09-14 Yes (up to Shaarli 0.8.x) 5.3 EOL: 2014-08-14 Yes (up to Shaarli 0.8.x) Required PHP extensions: Extension Required? Usage openssl required OpenSSL, HTTPS php-json required configuration parsing php-simplexml required REST API (Slim framework) php-mbstring CentOS, Fedora, RHEL, Windows, some hosting providers multibyte (Unicode) string support php-ctype required (bundled with most PHP installation) Type checking php-iconv required (bundled with most PHP installation) Character encoding used in translations php-session required (bundled with most PHP installation) User session php-zlib required (bundled with most PHP installation) Datastore I/O compression php-gd optional required to use thumbnails php-intl optional localized text sorting (e.g. e->\u00e8->f ) php-curl optional using cURL for fetching webpages and thumbnails in a more robust way php-gettext optional Use the translation system in gettext mode (faster) php-ldap optional LDAP login support Some plugins may require additional configuration. PHP: Supported versions PHP: Unsupported versions (EOL/End-of-life) PHP 7 Changelog PHP 5 Changelog PHP: Bugs SSL/TLS (HTTPS) # We recommend setting up HTTPS (SSL/ TLS ) on your webserver for secure communication between clients and the server. Let's Encrypt # For public-facing web servers this can be done using free SSL/TLS certificates from Let's Encrypt , a non-profit certificate authority provididing free certificates. How to secure Apache with Let's Encrypt How to secure Nginx with Let's Encrypt How To Use Certbot Standalone Mode to Retrieve Let's Encrypt SSL Certificates . In short: # install certbot sudo apt install certbot # stop your webserver if you already have one running # certbot in standalone mode needs to bind to port 80 (only needed on initial generation) sudo systemctl stop apache2 sudo systemctl stop nginx # generate initial certificates # Let's Encrypt ACME servers must be able to access your server! port forwarding and firewall must be properly configured sudo certbot certonly --standalone --noninteractive --agree-tos --email \"admin@shaarli.mydomain.org\" -d shaarli.mydomain.org # this will generate a private key and certificate at /etc/letsencrypt/live/shaarli.mydomain.org/{privkey,fullchain}.pem # restart the web server sudo systemctl start apache2 sudo systemctl start nginx On apache 2.4.43+ , you can also delegate LE certificate management to mod_md [ 1 ] in which case you don't need certbot and manual SSL configuration in virtualhosts. Self-signed # If you don't want to rely on a certificate authority, or the server can only be accessed from your own network, you can also generate self-signed certificates. Not that this will generate security warnings in web browsers/clients trying to access Shaarli: How To Create a Self-Signed SSL Certificate for Apache How To Create a Self-Signed SSL Certificate for Nginx How to Create Self-Signed SSL Certificates with OpenSSL How do I create my own Certificate Authority? Examples # The following examples assume a Debian-based operating system is installed. On other distributions you may have to adapt details such as package installation procedures, configuration file locations, and webserver username/group ( www-data or httpd are common values). In these examples we assume the document root for your web server/virtualhost is at /var/www/shaarli.mydomain.org/ : # create the document root (replace with your own domain name) sudo mkdir -p /var/www/shaarli.mydomain.org/ You can install Shaarli at the root of your virtualhost, or in a subdirectory as well. See Directory structure Apache # # Install apache + mod_php and PHP modules sudo apt update sudo apt install apache2 libapache2-mod-php php-json php-mbstring php-gd php-intl php-curl php-gettext # Edit the virtualhost configuration file with your favorite editor (replace the example domain name) sudo nano /etc/apache2/sites-available/shaarli.mydomain.org.conf <VirtualHost *:80> ServerName shaarli.mydomain.org DocumentRoot /var/www/shaarli.mydomain.org/ # For SSL/TLS certificates acquired with certbot or self-signed certificates # Redirect HTTP requests to HTTPS, except Let's Encrypt ACME challenge requests RewriteEngine on RewriteRule ^.well-known/acme-challenge/ - [L] RewriteCond %{HTTP_HOST} =shaarli.mydomain.org RewriteRule ^ https://shaarli.mydomain.org%{REQUEST_URI} [END,NE,R=permanent] </VirtualHost> # SSL/TLS configuration for Let's Encrypt certificates managed with mod_md #MDomain shaarli.mydomain.org #MDCertificateAgreement accepted #MDContactEmail admin@shaarli.mydomain.org #MDPrivateKeys RSA 4096 <VirtualHost *:443> ServerName shaarli.mydomain.org DocumentRoot /var/www/shaarli.mydomain.org/ # SSL/TLS configuration for Let's Encrypt certificates acquired with certbot standalone SSLEngine on SSLCertificateFile /etc/letsencrypt/live/shaarli.mydomain.org/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/shaarli.mydomain.org/privkey.pem # Let's Encrypt settings from https://github.com/certbot/certbot/blob/master/certbot-apache/certbot_apache/_internal/tls_configs/current-options-ssl-apache.conf SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1 SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 SSLHonorCipherOrder off SSLSessionTickets off SSLOptions +StrictRequire # SSL/TLS configuration for self-signed certificates #SSLEngine on #SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem #SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key # Optional, log PHP errors, useful for debugging #php_flag log_errors on #php_flag display_errors on #php_value error_reporting 2147483647 #php_value error_log /var/log/apache2/shaarli-php-error.log <Directory /var/www/shaarli.mydomain.org/> # Required for .htaccess support AllowOverride All Require all granted </Directory> <Directory /var/www/shaarli.mydomain.org/doc/html/> DirectoryIndex index.html <FilesMatch \".*\\.html\"> Require all granted </FilesMatch> </Directory> # BE CAREFUL: directives order matter! <FilesMatch \".*\\.(?!(ico|css|js|gif|jpe?g|png|ttf|oet|woff2?)$)[^\\.]*$\"> Require all denied </FilesMatch> DirectoryIndex index.php <Files \"index.php\"> Require all granted </Files> <FilesMatch \"\\.(?:ico|css|js|gif|jpe?g|png|ttf|oet|woff2)$\"> # allow client-side caching of static files Header set Cache-Control \"max-age=2628000, public, must-revalidate, proxy-revalidate\" </FilesMatch> # serve the Shaarli favicon from its custom location Alias favicon.ico /var/www/shaarli.mydomain.org/images/favicon.ico </VirtualHost> # Enable the virtualhost sudo a2ensite shaarli.mydomain.org # mod_ssl must be enabled to use TLS/SSL certificates # https://httpd.apache.org/docs/current/mod/mod_ssl.html sudo a2enmod ssl # mod_rewrite must be enabled to use the REST API # https://httpd.apache.org/docs/current/mod/mod_rewrite.html sudo a2enmod rewrite # mod_headers must be enabled to set custom headers from the server config sudo a2enmod headers # mod_version must only be enabled if you use Apache 2.2 or lower # https://httpd.apache.org/docs/current/mod/mod_version.html # sudo a2enmod version # restart the apache service sudo systemctl restart apache2 How to install the Apache web server Apache/PHP - error log per VirtualHost - StackOverflow Apache - PHP: php_value vs php_admin_value and the use of php_flag explained Server-side TLS (Apache) - Mozilla Apache 2.4 documentation Apache mod_proxy Apache Reverse Proxy Request Headers Nginx # This examples uses nginx and the PHP-FPM PHP interpreter. Nginx and PHP-FPM must be running using the same user and group, here we assume the user/group to be www-data:www-data . # install nginx and php-fpm sudo apt update sudo apt install nginx php-fpm # Edit the virtualhost configuration file with your favorite editor sudo nano /etc/nginx/sites-available/shaarli.mydomain.org server { listen 80; server_name shaarli.mydomain.org; # redirect all plain HTTP requests to HTTPS return 301 https://shaarli.mydomain.org$request_uri; } server { # ipv4 listening port/protocol listen 443 ssl http2; # ipv6 listening port/protocol listen [::]:443 ssl http2; server_name shaarli.mydomain.org; root /var/www/shaarli.mydomain.org; # log file locations # combined log format prepends the virtualhost/domain name to log entries access_log /var/log/nginx/access.log combined; error_log /var/log/nginx/error.log; # paths to private key and certificates for SSL/TLS ssl_certificate /etc/ssl/shaarli.mydomain.org.crt; ssl_certificate_key /etc/ssl/private/shaarli.mydomain.org.key; # Let's Encrypt SSL settings from https://github.com/certbot/certbot/blob/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf ssl_session_cache shared:le_nginx_SSL:10m; ssl_session_timeout 1440m; ssl_session_tickets off; ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers off; ssl_ciphers \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\"; # increase the maximum file upload size if needed: by default nginx limits file upload to 1MB (413 Entity Too Large error) client_max_body_size 100m; # relative path to shaarli from the root of the webserver # if shaarli is installed in a subdirectory of the main domain, edit the location accordingly location / { # default index file when no file URI is requested index index.php; try_files _ /index.php$is_args$args; } location ~ (index)\\.php$ { try_files $uri =404; # slim API - split URL path into (script_filename, path_info) fastcgi_split_path_info ^(.+\\.php)(/.+)$; # pass PHP requests to PHP-FPM fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi.conf; } location ~ /doc/html/ { default_type \"text/html\"; try_files $uri $uri/ $uri.html =404; } location = /favicon.ico { # serve the Shaarli favicon from its custom location alias /var/www/shaarli/images/favicon.ico; } # allow client-side caching of static files location ~* \\.(?:ico|css|js|gif|jpe?g|png|ttf|oet|woff2?)$ { expires max; add_header Cache-Control \"public, must-revalidate, proxy-revalidate\"; # HTTP 1.0 compatibility add_header Pragma public; } } # enable the configuration/virtualhost sudo ln -s /etc/nginx/sites-available/shaarli.mydomain.org /etc/nginx/sites-enabled/shaarli.mydomain.org # reload nginx configuration sudo systemctl reload nginx How to install the Nginx web server Nginx Beginner's guide Nginx documentation Nginx ngx_http_fastcgi_module Nginx Pitfalls Nginx PHP configuration examples - Karl Blessing Server-side TLS (Nginx) - Mozilla Reverse proxies # If Shaarli is hosted on a server behind a reverse proxy (i.e. there is a proxy server between clients and the web server hosting Shaarli), configure it accordingly. See Reverse proxy configuration. Using Shaarli without URL rewriting # By default, Shaarli uses Slim framework's URL, which requires URL rewriting. If you can't use URL rewriting for any reason (not supported by your web server, shared hosting, etc.), you can use Shaarli without URL rewriting. You just need to prefix your URL by /index.php/ . Example: instead of accessing https://shaarli.mydomain.org/ , use https://shaarli.mydomain.org/index.php/ . Recommended: * after installation, in the configuration page, set your header link to /index.php/ . * in your configuration file config.json.php set general.root_url to https://shaarli.mydomain.org/index.php/ . Allow import of large browser bookmarks export # Web browser bookmark exports can be large due to the presence of base64-encoded images and favicons/long subfolder names. Edit the PHP configuration file. Apache: /etc/php/<PHP_VERSION>/apache2/php.ini Nginx + PHP-FPM: /etc/php/<PHP_VERSION>/fpm/php.ini (in addition to client_max_body_size in the Nginx configuration ) [...] # (optional) increase the maximum file upload size: post_max_size = 100M [...] # (optional) increase the maximum file upload size: upload_max_filesize = 100M To verify PHP settings currently set on the server, create a phpinfo.php in your webserver's document root # example echo '<?php phpinfo(); ?>' | sudo tee /var/www/shaarli.mydomain.org/phpinfo.php #give read-only access to this file to the webserver user sudo chown www-data:root /var/www/shaarli.mydomain.org/phpinfo.php sudo chmod 0400 /var/www/shaarli.mydomain.org/phpinfo.php Access the file from a web browser (eg. https://shaarli.mydomain.org/phpinfo.php and look at the Loaded Configuration File and Scan this dir for additional .ini files entries It is recommended to remove the phpinfo.php when no longer needed as it publicly discloses details about your webserver configuration. Robots and crawlers # To opt-out of indexing your Shaarli instance by search engines, create a robots.txt file at the root of your virtualhost: User-agent: * Disallow: / By default Shaarli already disallows indexing of your local copy of the documentation by default, using <meta name=\"robots\"> HTML tags. Your Shaarli instance may still be indexed by various robots on the public Internet, that do not respect this header or the robots standard. Robots exclusion standard Introduction to robots.txt Robots meta tag, data-nosnippet, and X-Robots-Tag specifications About robots.txt About the robots META tag Fail2ban # fail2ban is an intrusion prevention framework that reads server (Apache, SSH, etc.) and uses iptables profiles to block brute-force attempts. You need to create a filter to detect shaarli login failures in logs, and a jail configuation to configure the behavior when failed login attempts are detected: # /etc/fail2ban/filter.d/shaarli-auth.conf [INCLUDES] before = common.conf [Definition] failregex = \\s-\\s<HOST>\\s-\\sLogin failed for user.*$ ignoreregex = # /etc/fail2ban/jail.local [shaarli-auth] enabled = true port = https,http filter = shaarli-auth logpath = /var/www/shaarli.mydomain.org/data/log.txt # allow 3 login attempts per IP address # (over a period specified by findtime = in /etc/fail2ban/jail.conf) maxretry = 3 # permanently ban the IP address after reaching the limit bantime = -1 Then restart the service: sudo systemctl restart fail2ban What next? # Shaarli installation","title":"Server configuration"},{"location":"Server-configuration/#server-configuration","text":"","title":"Server configuration"},{"location":"Server-configuration/#requirements","text":"","title":"Requirements"},{"location":"Server-configuration/#operating-system-and-web-server","text":"Shaarli can be hosted on dedicated/virtual servers, or shared hosting. You need write access to the Shaarli installation directory - you should have received instructions from your hosting provider on how to connect to the server using SSH (or FTP for shared hosts). Examples in this documentation are given for Debian , a GNU/Linux distribution widely used in server environments. Please adapt them to your specific Linux distribution. A $5/month VPS (1 CPU, 1 GiB RAM and 25 GiB SSD) will run any Shaarli installation without problems. Some hosting providers: DigitalOcean ( 1 , 2 , 3 , 4 , 5 , 6 ), Gandi , OVH , RackSpace , etc.","title":"Operating system and web server"},{"location":"Server-configuration/#network-and-domain-name","text":"Try to host the server in a region that is geographically close to your users. A domain name ( DNS record ) pointing to the server's public IP address is required to obtain a SSL/TLS certificate and setup HTTPS to secure client traffic to your Shaarli instance. You can obtain a domain name from a registrar ( 1 , 2 ), or from free subdomain providers ( 1 ). If you don't have a domain name, please set up a private domain name ( FQDN ) in your clients' hosts files to access the server (direct access by IP address can result in unexpected behavior). Setup a firewall (using iptables , ufw , fireHOL or any frontend of your choice) to deny all incoming traffic except tcp/80 and tcp/443 , which are needed to access the web server (and any other posrts you might need, like SSH). If the server is in a private network behind a NAT, ensure these ports are forwarded to the server. Shaarli makes outbound HTTP/HTTPS connections to websites you bookmark to fetch page information (title, thumbnails), the server must then have access to the Internet as well, and a working DNS resolver.","title":"Network and domain name"},{"location":"Server-configuration/#screencast","text":"Here is a screencast of the installation procedure","title":"Screencast"},{"location":"Server-configuration/#php","text":"Supported PHP versions: Version Status Shaarli compatibility 8.1 Supported Yes 8.0 EOL: 2023-11-26 Yes 7.4 EOL: 2022-11-28 Yes 7.3 EOL: 2021-12-06 Yes (up to Shaarli 0.12.1) 7.2 EOL: 2020-11-30 Yes (up to Shaarli 0.12.1) 7.1 EOL: 2019-12-01 Yes (up to Shaarli 0.12.1) 7.0 EOL: 2018-12-03 Yes (up to Shaarli 0.10.x) 5.6 EOL: 2018-12-31 Yes (up to Shaarli 0.10.x) 5.5 EOL: 2016-07-10 Yes 5.4 EOL: 2015-09-14 Yes (up to Shaarli 0.8.x) 5.3 EOL: 2014-08-14 Yes (up to Shaarli 0.8.x) Required PHP extensions: Extension Required? Usage openssl required OpenSSL, HTTPS php-json required configuration parsing php-simplexml required REST API (Slim framework) php-mbstring CentOS, Fedora, RHEL, Windows, some hosting providers multibyte (Unicode) string support php-ctype required (bundled with most PHP installation) Type checking php-iconv required (bundled with most PHP installation) Character encoding used in translations php-session required (bundled with most PHP installation) User session php-zlib required (bundled with most PHP installation) Datastore I/O compression php-gd optional required to use thumbnails php-intl optional localized text sorting (e.g. e->\u00e8->f ) php-curl optional using cURL for fetching webpages and thumbnails in a more robust way php-gettext optional Use the translation system in gettext mode (faster) php-ldap optional LDAP login support Some plugins may require additional configuration. PHP: Supported versions PHP: Unsupported versions (EOL/End-of-life) PHP 7 Changelog PHP 5 Changelog PHP: Bugs","title":"PHP"},{"location":"Server-configuration/#ssltls-https","text":"We recommend setting up HTTPS (SSL/ TLS ) on your webserver for secure communication between clients and the server.","title":"SSL/TLS (HTTPS)"},{"location":"Server-configuration/#lets-encrypt","text":"For public-facing web servers this can be done using free SSL/TLS certificates from Let's Encrypt , a non-profit certificate authority provididing free certificates. How to secure Apache with Let's Encrypt How to secure Nginx with Let's Encrypt How To Use Certbot Standalone Mode to Retrieve Let's Encrypt SSL Certificates . In short: # install certbot sudo apt install certbot # stop your webserver if you already have one running # certbot in standalone mode needs to bind to port 80 (only needed on initial generation) sudo systemctl stop apache2 sudo systemctl stop nginx # generate initial certificates # Let's Encrypt ACME servers must be able to access your server! port forwarding and firewall must be properly configured sudo certbot certonly --standalone --noninteractive --agree-tos --email \"admin@shaarli.mydomain.org\" -d shaarli.mydomain.org # this will generate a private key and certificate at /etc/letsencrypt/live/shaarli.mydomain.org/{privkey,fullchain}.pem # restart the web server sudo systemctl start apache2 sudo systemctl start nginx On apache 2.4.43+ , you can also delegate LE certificate management to mod_md [ 1 ] in which case you don't need certbot and manual SSL configuration in virtualhosts.","title":"Let's Encrypt"},{"location":"Server-configuration/#self-signed","text":"If you don't want to rely on a certificate authority, or the server can only be accessed from your own network, you can also generate self-signed certificates. Not that this will generate security warnings in web browsers/clients trying to access Shaarli: How To Create a Self-Signed SSL Certificate for Apache How To Create a Self-Signed SSL Certificate for Nginx How to Create Self-Signed SSL Certificates with OpenSSL How do I create my own Certificate Authority?","title":"Self-signed"},{"location":"Server-configuration/#examples","text":"The following examples assume a Debian-based operating system is installed. On other distributions you may have to adapt details such as package installation procedures, configuration file locations, and webserver username/group ( www-data or httpd are common values). In these examples we assume the document root for your web server/virtualhost is at /var/www/shaarli.mydomain.org/ : # create the document root (replace with your own domain name) sudo mkdir -p /var/www/shaarli.mydomain.org/ You can install Shaarli at the root of your virtualhost, or in a subdirectory as well. See Directory structure","title":"Examples"},{"location":"Server-configuration/#apache","text":"# Install apache + mod_php and PHP modules sudo apt update sudo apt install apache2 libapache2-mod-php php-json php-mbstring php-gd php-intl php-curl php-gettext # Edit the virtualhost configuration file with your favorite editor (replace the example domain name) sudo nano /etc/apache2/sites-available/shaarli.mydomain.org.conf <VirtualHost *:80> ServerName shaarli.mydomain.org DocumentRoot /var/www/shaarli.mydomain.org/ # For SSL/TLS certificates acquired with certbot or self-signed certificates # Redirect HTTP requests to HTTPS, except Let's Encrypt ACME challenge requests RewriteEngine on RewriteRule ^.well-known/acme-challenge/ - [L] RewriteCond %{HTTP_HOST} =shaarli.mydomain.org RewriteRule ^ https://shaarli.mydomain.org%{REQUEST_URI} [END,NE,R=permanent] </VirtualHost> # SSL/TLS configuration for Let's Encrypt certificates managed with mod_md #MDomain shaarli.mydomain.org #MDCertificateAgreement accepted #MDContactEmail admin@shaarli.mydomain.org #MDPrivateKeys RSA 4096 <VirtualHost *:443> ServerName shaarli.mydomain.org DocumentRoot /var/www/shaarli.mydomain.org/ # SSL/TLS configuration for Let's Encrypt certificates acquired with certbot standalone SSLEngine on SSLCertificateFile /etc/letsencrypt/live/shaarli.mydomain.org/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/shaarli.mydomain.org/privkey.pem # Let's Encrypt settings from https://github.com/certbot/certbot/blob/master/certbot-apache/certbot_apache/_internal/tls_configs/current-options-ssl-apache.conf SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1 SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 SSLHonorCipherOrder off SSLSessionTickets off SSLOptions +StrictRequire # SSL/TLS configuration for self-signed certificates #SSLEngine on #SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem #SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key # Optional, log PHP errors, useful for debugging #php_flag log_errors on #php_flag display_errors on #php_value error_reporting 2147483647 #php_value error_log /var/log/apache2/shaarli-php-error.log <Directory /var/www/shaarli.mydomain.org/> # Required for .htaccess support AllowOverride All Require all granted </Directory> <Directory /var/www/shaarli.mydomain.org/doc/html/> DirectoryIndex index.html <FilesMatch \".*\\.html\"> Require all granted </FilesMatch> </Directory> # BE CAREFUL: directives order matter! <FilesMatch \".*\\.(?!(ico|css|js|gif|jpe?g|png|ttf|oet|woff2?)$)[^\\.]*$\"> Require all denied </FilesMatch> DirectoryIndex index.php <Files \"index.php\"> Require all granted </Files> <FilesMatch \"\\.(?:ico|css|js|gif|jpe?g|png|ttf|oet|woff2)$\"> # allow client-side caching of static files Header set Cache-Control \"max-age=2628000, public, must-revalidate, proxy-revalidate\" </FilesMatch> # serve the Shaarli favicon from its custom location Alias favicon.ico /var/www/shaarli.mydomain.org/images/favicon.ico </VirtualHost> # Enable the virtualhost sudo a2ensite shaarli.mydomain.org # mod_ssl must be enabled to use TLS/SSL certificates # https://httpd.apache.org/docs/current/mod/mod_ssl.html sudo a2enmod ssl # mod_rewrite must be enabled to use the REST API # https://httpd.apache.org/docs/current/mod/mod_rewrite.html sudo a2enmod rewrite # mod_headers must be enabled to set custom headers from the server config sudo a2enmod headers # mod_version must only be enabled if you use Apache 2.2 or lower # https://httpd.apache.org/docs/current/mod/mod_version.html # sudo a2enmod version # restart the apache service sudo systemctl restart apache2 How to install the Apache web server Apache/PHP - error log per VirtualHost - StackOverflow Apache - PHP: php_value vs php_admin_value and the use of php_flag explained Server-side TLS (Apache) - Mozilla Apache 2.4 documentation Apache mod_proxy Apache Reverse Proxy Request Headers","title":"Apache"},{"location":"Server-configuration/#nginx","text":"This examples uses nginx and the PHP-FPM PHP interpreter. Nginx and PHP-FPM must be running using the same user and group, here we assume the user/group to be www-data:www-data . # install nginx and php-fpm sudo apt update sudo apt install nginx php-fpm # Edit the virtualhost configuration file with your favorite editor sudo nano /etc/nginx/sites-available/shaarli.mydomain.org server { listen 80; server_name shaarli.mydomain.org; # redirect all plain HTTP requests to HTTPS return 301 https://shaarli.mydomain.org$request_uri; } server { # ipv4 listening port/protocol listen 443 ssl http2; # ipv6 listening port/protocol listen [::]:443 ssl http2; server_name shaarli.mydomain.org; root /var/www/shaarli.mydomain.org; # log file locations # combined log format prepends the virtualhost/domain name to log entries access_log /var/log/nginx/access.log combined; error_log /var/log/nginx/error.log; # paths to private key and certificates for SSL/TLS ssl_certificate /etc/ssl/shaarli.mydomain.org.crt; ssl_certificate_key /etc/ssl/private/shaarli.mydomain.org.key; # Let's Encrypt SSL settings from https://github.com/certbot/certbot/blob/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf ssl_session_cache shared:le_nginx_SSL:10m; ssl_session_timeout 1440m; ssl_session_tickets off; ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers off; ssl_ciphers \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\"; # increase the maximum file upload size if needed: by default nginx limits file upload to 1MB (413 Entity Too Large error) client_max_body_size 100m; # relative path to shaarli from the root of the webserver # if shaarli is installed in a subdirectory of the main domain, edit the location accordingly location / { # default index file when no file URI is requested index index.php; try_files _ /index.php$is_args$args; } location ~ (index)\\.php$ { try_files $uri =404; # slim API - split URL path into (script_filename, path_info) fastcgi_split_path_info ^(.+\\.php)(/.+)$; # pass PHP requests to PHP-FPM fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi.conf; } location ~ /doc/html/ { default_type \"text/html\"; try_files $uri $uri/ $uri.html =404; } location = /favicon.ico { # serve the Shaarli favicon from its custom location alias /var/www/shaarli/images/favicon.ico; } # allow client-side caching of static files location ~* \\.(?:ico|css|js|gif|jpe?g|png|ttf|oet|woff2?)$ { expires max; add_header Cache-Control \"public, must-revalidate, proxy-revalidate\"; # HTTP 1.0 compatibility add_header Pragma public; } } # enable the configuration/virtualhost sudo ln -s /etc/nginx/sites-available/shaarli.mydomain.org /etc/nginx/sites-enabled/shaarli.mydomain.org # reload nginx configuration sudo systemctl reload nginx How to install the Nginx web server Nginx Beginner's guide Nginx documentation Nginx ngx_http_fastcgi_module Nginx Pitfalls Nginx PHP configuration examples - Karl Blessing Server-side TLS (Nginx) - Mozilla","title":"Nginx"},{"location":"Server-configuration/#reverse-proxies","text":"If Shaarli is hosted on a server behind a reverse proxy (i.e. there is a proxy server between clients and the web server hosting Shaarli), configure it accordingly. See Reverse proxy configuration.","title":"Reverse proxies"},{"location":"Server-configuration/#using-shaarli-without-url-rewriting","text":"By default, Shaarli uses Slim framework's URL, which requires URL rewriting. If you can't use URL rewriting for any reason (not supported by your web server, shared hosting, etc.), you can use Shaarli without URL rewriting. You just need to prefix your URL by /index.php/ . Example: instead of accessing https://shaarli.mydomain.org/ , use https://shaarli.mydomain.org/index.php/ . Recommended: * after installation, in the configuration page, set your header link to /index.php/ . * in your configuration file config.json.php set general.root_url to https://shaarli.mydomain.org/index.php/ .","title":"Using Shaarli without URL rewriting"},{"location":"Server-configuration/#allow-import-of-large-browser-bookmarks-export","text":"Web browser bookmark exports can be large due to the presence of base64-encoded images and favicons/long subfolder names. Edit the PHP configuration file. Apache: /etc/php/<PHP_VERSION>/apache2/php.ini Nginx + PHP-FPM: /etc/php/<PHP_VERSION>/fpm/php.ini (in addition to client_max_body_size in the Nginx configuration ) [...] # (optional) increase the maximum file upload size: post_max_size = 100M [...] # (optional) increase the maximum file upload size: upload_max_filesize = 100M To verify PHP settings currently set on the server, create a phpinfo.php in your webserver's document root # example echo '<?php phpinfo(); ?>' | sudo tee /var/www/shaarli.mydomain.org/phpinfo.php #give read-only access to this file to the webserver user sudo chown www-data:root /var/www/shaarli.mydomain.org/phpinfo.php sudo chmod 0400 /var/www/shaarli.mydomain.org/phpinfo.php Access the file from a web browser (eg. https://shaarli.mydomain.org/phpinfo.php and look at the Loaded Configuration File and Scan this dir for additional .ini files entries It is recommended to remove the phpinfo.php when no longer needed as it publicly discloses details about your webserver configuration.","title":"Allow import of large browser bookmarks export"},{"location":"Server-configuration/#robots-and-crawlers","text":"To opt-out of indexing your Shaarli instance by search engines, create a robots.txt file at the root of your virtualhost: User-agent: * Disallow: / By default Shaarli already disallows indexing of your local copy of the documentation by default, using <meta name=\"robots\"> HTML tags. Your Shaarli instance may still be indexed by various robots on the public Internet, that do not respect this header or the robots standard. Robots exclusion standard Introduction to robots.txt Robots meta tag, data-nosnippet, and X-Robots-Tag specifications About robots.txt About the robots META tag","title":"Robots and crawlers"},{"location":"Server-configuration/#fail2ban","text":"fail2ban is an intrusion prevention framework that reads server (Apache, SSH, etc.) and uses iptables profiles to block brute-force attempts. You need to create a filter to detect shaarli login failures in logs, and a jail configuation to configure the behavior when failed login attempts are detected: # /etc/fail2ban/filter.d/shaarli-auth.conf [INCLUDES] before = common.conf [Definition] failregex = \\s-\\s<HOST>\\s-\\sLogin failed for user.*$ ignoreregex = # /etc/fail2ban/jail.local [shaarli-auth] enabled = true port = https,http filter = shaarli-auth logpath = /var/www/shaarli.mydomain.org/data/log.txt # allow 3 login attempts per IP address # (over a period specified by findtime = in /etc/fail2ban/jail.conf) maxretry = 3 # permanently ban the IP address after reaching the limit bantime = -1 Then restart the service: sudo systemctl restart fail2ban","title":"Fail2ban"},{"location":"Server-configuration/#what-next","text":"Shaarli installation","title":"What next?"},{"location":"Shaarli-configuration/","text":"Shaarli configuration # Once your Shaarli instance is installed, the file data/config.json.php is generated: it contains all settings in JSON format, and can be edited to customize values it defines which plugins are enabled its values override those defined in index.php it is wrapped in a PHP comment so that its contents are never served by the web server, regardless of configuration Do not edit configuration options in index.php! Your changes would be lost. Tools menu # Some settings can be configured directly from a web browser by accesing the Tools menu. Values are read/written to/from the configuration file. LDAP # host : LDAP host used for user authentication dn : user DN template ( sprintf format, %s being replaced by user login) Configuration file example # <?php /* { \"credentials\": { \"login\": \"<login>\", \"hash\": \"<password hash>\", \"salt\": \"<password salt>\" }, \"security\": { \"ban_after\": 4, \"session_protection_disabled\": false, \"ban_duration\": 1800, \"trusted_proxies\": [ \"1.2.3.4\", \"5.6.7.8\" ], \"allowed_protocols\": [ \"ftp\", \"ftps\", \"magnet\" ] }, \"resources\": { \"data_dir\": \"data\", \"config\": \"data\\/config.php\", \"datastore\": \"data\\/datastore.php\", \"ban_file\": \"data\\/ipbans.php\", \"updates\": \"data\\/updates.txt\", \"log\": \"data\\/log.txt\", \"update_check\": \"data\\/lastupdatecheck.txt\", \"raintpl_tmp\": \"tmp\\/\", \"raintpl_tpl\": \"tpl\\/\", \"thumbnails_cache\": \"cache\", \"page_cache\": \"pagecache\" }, \"general\": { \"check_updates\": true, \"rss_permalinks\": true, \"links_per_page\": 20, \"default_private_links\": true, \"check_updates_branch\": \"stable\", \"check_updates_interval\": 86400, \"enabled_plugins\": [ \"markdown\", \"wallabag\", \"archiveorg\" ], \"timezone\": \"Europe\\/Paris\", \"title\": \"My Shaarli\", \"header_link\": \"?\" \"tags_separator\": \" \" }, \"dev\": { \"debug\": false, } \"extras\": { \"show_atom\": false, \"hide_public_links\": false, \"hide_timestamps\": false, \"open_shaarli\": false, }, \"formatter\": \"markdown\", \"updates\": { \"check_updates\": true, \"check_updates_branch\": \"stable\", \"check_updates_interval\": 86400 }, \"feed\": { \"rss_permalinks\": true, \"show_atom\": false }, \"privacy\": { \"default_private_links\": true, \"hide_public_links\": false, \"force_login\": false, \"hide_timestamps\": false, \"remember_user_default\": true }, \"thumbnails\": { \"width\": 125, \"height\": 90, \"mode\": \"common\" }, \"plugins\": { \"WALLABAG_URL\": \"http://demo.wallabag.org\", \"WALLABAG_VERSION\": \"1\" }, \"translation\": { \"language\": \"fr\", \"mode\": \"php\", \"extensions\": { \"demo\": \"plugins/demo_plugin/languages/\" } }, \"ldap\": { \"host\": \"ldap://localhost\", \"dn\": \"uid=%s,ou=people,dc=example,dc=org\" } } ?> Settings # Credentials # These settings should not be edited login : Login username. hash : Generated password hash. salt : Password salt. General # title : Shaarli's instance title. header_link : Link to the homepage. links_per_page : Number of Shaares displayed per page. timezone : See the list of supported timezones . enabled_plugins : List of enabled plugins. default_note_title : Default title of a new note. enable_async_metadata (boolean): Retrieve external bookmark metadata asynchronously to prevent bookmark creation slowdown. retrieve_description (boolean): If set to true, for every new Shaare Shaarli will try to retrieve the description and keywords from the HTML meta tags. root_url : Overrides automatic discovery of Shaarli instance's URL (e.g.) https://sub.domain.tld/shaarli-folder/ . tags_separator : Defines your tags separator (default: whitespace). Security # session_protection_disabled : Disable session cookie hijacking protection (not recommended). It might be useful if your IP adress often changes. ban_after : Failed login attempts before being IP banned. ban_duration : IP ban duration in seconds. open_shaarli : Anyone can add a new Shaare while logged out if enabled. trusted_proxies : List of trusted IP which won't be banned after failed login attemps. Useful if Shaarli is behind a reverse proxy. allowed_protocols : List of allowed protocols in shaare URLs or markdown-rendered descriptions. Useful if you want to store javascript: links (bookmarklets) or file:/// URIs in Shaarli (default: [\"ftp\", \"ftps\", \"magnet\"] ). Formatter # Single string value. Default available: default : supports line breaks, URL and hashtag auto-links. markdown : supports Markdown . markdownExtra : adds extra flavor to Markdown. Formatter Settings # Additional settings applied to formatters. default # autolink : boolean to enable or disable automatic linkification of URL and hashtags. Resources # data_dir : Data directory. datastore : Shaarli's Shaares database file path. history : Shaarli's operation history file path. updates : File path for the ran updates file. log : Log file path. update_check : Last update check file path. raintpl_tpl : Templates directory. raintpl_tmp : Template engine cache directory. thumbnails_cache : Thumbnails cache directory. page_cache : Shaarli's internal cache directory. ban_file : Banned IP file path. Translation # language : translation language (also see Translations ) auto (default): The translation language is chosen from the browser locale. It means that the language can be different for 2 different visitors depending on their locale. en : Use the English translation. fr : Use the French translation. mode : auto or php (default): Use the PHP implementation of gettext (slower) gettext : Use PHP builtin gettext extension (faster, but requires php-gettext to be installed and to reload the web server on update) extension : Translation extensions for custom themes or plugins. Must be an associative array: translation domain => translation path . Updates # check_updates : Enable or disable update check to the git repository. check_updates_branch : Git branch used to check updates (e.g. stable or master ). check_updates_interval : Look for new version every N seconds (default: every day). Privacy # default_private_links : Check the private checkbox by default for every new Shaare. hide_public_links : All Shaares are hidden while logged out. force_login : if hide_public_links and this are set to true , all anonymous users are redirected to the login page. hide_timestamps : Timestamps are hidden. remember_user_default : Default state of the login page's remember me checkbox true : checked by default, false : unchecked by default Feed # rss_permalinks : Enable this to redirect RSS links to Shaarli's permalinks instead of shaared URL. show_atom : Display ATOM feed button. Thumbnails # width: width of generated thumbnails, in pixels height: height of generated thumbnails, in pixels mode: enable thumbnails for all shaares, or common media hosts, or none . Plugins configuration # See Plugins","title":"Shaarli configuration"},{"location":"Shaarli-configuration/#shaarli-configuration","text":"Once your Shaarli instance is installed, the file data/config.json.php is generated: it contains all settings in JSON format, and can be edited to customize values it defines which plugins are enabled its values override those defined in index.php it is wrapped in a PHP comment so that its contents are never served by the web server, regardless of configuration Do not edit configuration options in index.php! Your changes would be lost.","title":"Shaarli configuration"},{"location":"Shaarli-configuration/#tools-menu","text":"Some settings can be configured directly from a web browser by accesing the Tools menu. Values are read/written to/from the configuration file.","title":"Tools menu"},{"location":"Shaarli-configuration/#ldap","text":"host : LDAP host used for user authentication dn : user DN template ( sprintf format, %s being replaced by user login)","title":"LDAP"},{"location":"Shaarli-configuration/#configuration-file-example","text":"<?php /* { \"credentials\": { \"login\": \"<login>\", \"hash\": \"<password hash>\", \"salt\": \"<password salt>\" }, \"security\": { \"ban_after\": 4, \"session_protection_disabled\": false, \"ban_duration\": 1800, \"trusted_proxies\": [ \"1.2.3.4\", \"5.6.7.8\" ], \"allowed_protocols\": [ \"ftp\", \"ftps\", \"magnet\" ] }, \"resources\": { \"data_dir\": \"data\", \"config\": \"data\\/config.php\", \"datastore\": \"data\\/datastore.php\", \"ban_file\": \"data\\/ipbans.php\", \"updates\": \"data\\/updates.txt\", \"log\": \"data\\/log.txt\", \"update_check\": \"data\\/lastupdatecheck.txt\", \"raintpl_tmp\": \"tmp\\/\", \"raintpl_tpl\": \"tpl\\/\", \"thumbnails_cache\": \"cache\", \"page_cache\": \"pagecache\" }, \"general\": { \"check_updates\": true, \"rss_permalinks\": true, \"links_per_page\": 20, \"default_private_links\": true, \"check_updates_branch\": \"stable\", \"check_updates_interval\": 86400, \"enabled_plugins\": [ \"markdown\", \"wallabag\", \"archiveorg\" ], \"timezone\": \"Europe\\/Paris\", \"title\": \"My Shaarli\", \"header_link\": \"?\" \"tags_separator\": \" \" }, \"dev\": { \"debug\": false, } \"extras\": { \"show_atom\": false, \"hide_public_links\": false, \"hide_timestamps\": false, \"open_shaarli\": false, }, \"formatter\": \"markdown\", \"updates\": { \"check_updates\": true, \"check_updates_branch\": \"stable\", \"check_updates_interval\": 86400 }, \"feed\": { \"rss_permalinks\": true, \"show_atom\": false }, \"privacy\": { \"default_private_links\": true, \"hide_public_links\": false, \"force_login\": false, \"hide_timestamps\": false, \"remember_user_default\": true }, \"thumbnails\": { \"width\": 125, \"height\": 90, \"mode\": \"common\" }, \"plugins\": { \"WALLABAG_URL\": \"http://demo.wallabag.org\", \"WALLABAG_VERSION\": \"1\" }, \"translation\": { \"language\": \"fr\", \"mode\": \"php\", \"extensions\": { \"demo\": \"plugins/demo_plugin/languages/\" } }, \"ldap\": { \"host\": \"ldap://localhost\", \"dn\": \"uid=%s,ou=people,dc=example,dc=org\" } } ?>","title":"Configuration file example"},{"location":"Shaarli-configuration/#settings","text":"","title":"Settings"},{"location":"Shaarli-configuration/#credentials","text":"These settings should not be edited login : Login username. hash : Generated password hash. salt : Password salt.","title":"Credentials"},{"location":"Shaarli-configuration/#general","text":"title : Shaarli's instance title. header_link : Link to the homepage. links_per_page : Number of Shaares displayed per page. timezone : See the list of supported timezones . enabled_plugins : List of enabled plugins. default_note_title : Default title of a new note. enable_async_metadata (boolean): Retrieve external bookmark metadata asynchronously to prevent bookmark creation slowdown. retrieve_description (boolean): If set to true, for every new Shaare Shaarli will try to retrieve the description and keywords from the HTML meta tags. root_url : Overrides automatic discovery of Shaarli instance's URL (e.g.) https://sub.domain.tld/shaarli-folder/ . tags_separator : Defines your tags separator (default: whitespace).","title":"General"},{"location":"Shaarli-configuration/#security","text":"session_protection_disabled : Disable session cookie hijacking protection (not recommended). It might be useful if your IP adress often changes. ban_after : Failed login attempts before being IP banned. ban_duration : IP ban duration in seconds. open_shaarli : Anyone can add a new Shaare while logged out if enabled. trusted_proxies : List of trusted IP which won't be banned after failed login attemps. Useful if Shaarli is behind a reverse proxy. allowed_protocols : List of allowed protocols in shaare URLs or markdown-rendered descriptions. Useful if you want to store javascript: links (bookmarklets) or file:/// URIs in Shaarli (default: [\"ftp\", \"ftps\", \"magnet\"] ).","title":"Security"},{"location":"Shaarli-configuration/#formatter","text":"Single string value. Default available: default : supports line breaks, URL and hashtag auto-links. markdown : supports Markdown . markdownExtra : adds extra flavor to Markdown.","title":"Formatter"},{"location":"Shaarli-configuration/#formatter-settings","text":"Additional settings applied to formatters.","title":"Formatter Settings"},{"location":"Shaarli-configuration/#default","text":"autolink : boolean to enable or disable automatic linkification of URL and hashtags.","title":"default"},{"location":"Shaarli-configuration/#resources","text":"data_dir : Data directory. datastore : Shaarli's Shaares database file path. history : Shaarli's operation history file path. updates : File path for the ran updates file. log : Log file path. update_check : Last update check file path. raintpl_tpl : Templates directory. raintpl_tmp : Template engine cache directory. thumbnails_cache : Thumbnails cache directory. page_cache : Shaarli's internal cache directory. ban_file : Banned IP file path.","title":"Resources"},{"location":"Shaarli-configuration/#translation","text":"language : translation language (also see Translations ) auto (default): The translation language is chosen from the browser locale. It means that the language can be different for 2 different visitors depending on their locale. en : Use the English translation. fr : Use the French translation. mode : auto or php (default): Use the PHP implementation of gettext (slower) gettext : Use PHP builtin gettext extension (faster, but requires php-gettext to be installed and to reload the web server on update) extension : Translation extensions for custom themes or plugins. Must be an associative array: translation domain => translation path .","title":"Translation"},{"location":"Shaarli-configuration/#updates","text":"check_updates : Enable or disable update check to the git repository. check_updates_branch : Git branch used to check updates (e.g. stable or master ). check_updates_interval : Look for new version every N seconds (default: every day).","title":"Updates"},{"location":"Shaarli-configuration/#privacy","text":"default_private_links : Check the private checkbox by default for every new Shaare. hide_public_links : All Shaares are hidden while logged out. force_login : if hide_public_links and this are set to true , all anonymous users are redirected to the login page. hide_timestamps : Timestamps are hidden. remember_user_default : Default state of the login page's remember me checkbox true : checked by default, false : unchecked by default","title":"Privacy"},{"location":"Shaarli-configuration/#feed","text":"rss_permalinks : Enable this to redirect RSS links to Shaarli's permalinks instead of shaared URL. show_atom : Display ATOM feed button.","title":"Feed"},{"location":"Shaarli-configuration/#thumbnails","text":"width: width of generated thumbnails, in pixels height: height of generated thumbnails, in pixels mode: enable thumbnails for all shaares, or common media hosts, or none .","title":"Thumbnails"},{"location":"Shaarli-configuration/#plugins-configuration","text":"See Plugins","title":"Plugins configuration"},{"location":"Troubleshooting/","text":"Troubleshooting # First of all, ensure that both the web server and Shaarli are correctly configured. Login # I forgot my password! # Delete the file data/config.json.php and display the page again. You will be asked for a new login/password. I'm locked out - Login bruteforce protection # Login form is protected against brute force attacks: 4 failed logins will ban the IP address from login for 30 minutes. Banned IPs can still browse Shaares. To remove the current IP bans, delete the file data/ipbans.php To list all login attempts, see data/log.txt (succesful/failed logins, bans/lifted bans) Browser issues # Redirection issues (HTTP Referer) # Shaarli relies on HTTP_REFERER for some functions (like redirects and clicking on tags). If you have disabled or altered/spoofed HTTP referers in your browser, some features of Shaarli may not work as expected (depending on configuration and installed plugins), notably redirections between pages. Firefox Referer settings are available by browsing about:config and are documented here . network.http.referer.spoofSource = true in particular is known to break some functionality in Shaarli. Firefox, localhost and redirections # localhost is not a proper Fully Qualified Domain Name (FQDN); if Firefox has been set up to spoof referers, or only accept requests from the same base domain/host, Shaarli redirections will not work properly. To solve this, assign a local domain to your host, e.g. localhost.lan in your hosts file and browse Shaarli at http://localhost.lan/. Hosting problems # Old PHP versions # On hosts (such as free.fr ) which only support PHP 5.6, Shaarli v0.10.4 is the maximum supported version. At the root of your webspace create a sessions directory and a .htaccess file containing: <IfDefine Free> php56 1 </IfDefine> <Files \".ht*\"> Order allow,deny Deny from all Satisfy all </Files> Options -Indexes If you have an error such as: Parse error: syntax error, unexpected '=', expecting '(' in /links/index.php on line xxx , it means that your host is using PHP 4, not PHP 5. Shaarli requires PHP 5.1. Try changing the file extension to .php5 On 1and1 : If you add the link from the page (and not from the bookmarklet), Shaarli will no be able to get the title of the page. You will have to enter it manually. (Because they have disabled the ability to download a file through HTTP). If you have the error Warning: file_get_contents() [function.file-get-contents]: URL file-access is disabled in the server configuration in /\u2026/index.php on line xxx , it means that your host has disabled the ability to fetch a file by HTTP in the php config (Typically in 1and1 hosting). Bad host. Change host. Or comment the following lines: //list($status,$headers,$data) = getHTTP($url,4); // Short timeout to keep the application responsive. // FIXME: Decode charset according to charset specified in either 1) HTTP response headers or 2) <head> in html //if (strpos($status,'200 OK')) $title=html_extract_title($data); On hosts (such as free.fr ) which forbid outgoing HTTP requests, some thumbnails will not work. On hosts (such as free.fr ) which limit the number of FTP connections, setup your FTP client accordingly (else some files may be missing after upload). On lost-oasis , RSS doesn't work correctly, because of this message at the begining of the RSS/ATOM feed : <? // tout ce qui est charge ici (generalement des includes et require) est charge en permanence. ?> . To fix this, remove this message from php-include/prepend.php Dates are not properly formatted # Shaarli tries to sniff the language of the browser (using HTTP_ACCEPT_LANGUAGE headers) and choose a date format accordingly. But Shaarli can only use the date formats (and more generally speaking, the locales) provided by the webserver. So even if you have a browser in French, you may end up with dates in US format (it's the case on sebsauvage.net :-( ) My session expires! I can't stay logged in # This can be caused by several things: Your php installation may not have a proper directory setup for session files. (eg. on Free.fr you need to create a session directory on the root of your website.) You may need to create the session directory of set it up. Most hosts regularly clean the temporary and session directories. Your host may be cleaning those directories too aggressively (eg.OVH hosts), forcing an expire of the session. You may want to set the session directory in your web root. (eg. Create the sessions subdirectory and add ini_set('session.save_path', $_SERVER['DOCUMENT_ROOT'].'/../sessions'); . Make sure this directory is not browsable !) If your IP address changes during surfing, Shaarli will force expire your session for security reasons (to prevent session cookie hijacking). This can happen when surfing from WiFi or 3G (you may have switched WiFi/3G access point), or in some corporate/university proxies which use load balancing (and may have proxies with several external IP addresses). Some browser addons may interfer with HTTP headers (ipfuck/ipflood/GreaseMonkey\u2026). Try disabling those. You may be using OperaTurbo or OperaMini, which use their own proxies which may change from time to time. If you have another application on the same webserver where Shaarli is installed, these application may forcefully expire php sessions. Old apache versions, Internal Server Error # If you hosting provider only provides apache 2.2 and no support for mod_version , .htaccess files may cause 500 errors (Internal Server Error). See this workaround . Sessions do not seem to work correctly on your server # Follow the instructions in the error message. Make sure you are accessing shaarli via a direct IP address or a proper hostname. If you have no dots in the hostname (e.g. localhost or http://my-webserver/shaarli/ ), some browsers will not store cookies at all (this respects the HTTP cookie specification ). Error 406 \"Not acceptable\" # If attempting to save a link results in a Not acceptable error (HTTP status code of 406 ), it is likely due to strict settings for mod_security (a module used with Apache). This cannot be mitigated by reconfiguring Shaarli itself, and must be dealt with at the level of the underlying web server instead. On some shared hosting services (such as Bluehost ), mod_security is enabled by default, so the recommended course of action is to get in touch with the helpdesk and ask them to disable mod_security for your domain, sub-domain, or the subdirectory where Shaarli is installed. Ideally, you want to narrow it down to a very specific location, so as to continue reaping the benefits of mod_security elsewhere on your domain. If asked for specific, you can refer support staff to this issue , where more technical details are available. Timeout during long-lasting operations # You may need to adjust timeouts to larger values in your reverse proxy configuration if you're getting 504 Gateway Timeout errors during long-lasting operations (like importing many bookmarks from HTML, or batch deleting tags) on slow hardware. The PHP setting max_execution_time may also need to be adjusted for your specific setup. See issues #1854 and #1910 . Upgrades # You must specify an integer as a key # In v0.8.1 we changed how Shaare keys are handled (from timestamps to incremental integers). Take a look at data/updates.txt content. updates.txt contains updateMethodDatastoreIds # Try to delete it and refresh your page while being logged in. updates.txt doesn't exist or doesn't contain updateMethodDatastoreIds # Create data/updates.txt if it doesn't exist Paste this string in the update file ;updateMethodRenameDashTags; Login to Shaarli Delete the update file Refresh Import/export # Importing shaarli data to Firefox # In Firefox, open the bookmark manager ( Bookmarks menu > Show all bookmarks or Ctrl+Shift+B ), select Import and Backup > Import bookmarks in HTML format Make sure the Prepend note permalinks with this Shaarli instance's URL box is checked when exporting, so that text-only/notes Shaares still point to the Shaarli instance you exported them from. Depending on the number of bookmarks, the import can take some time. You may be interested in these Firefox addons to manage bookmarks imported from Shaarli Bookmark Deduplicator - provides an easy way to deduplicate your bookmarks TagSieve - browse your bookmarks by their tags Diigo # If you export your bookmark from Diigo, make sure you use the Delicious export, not the Netscape export. (Their Netscape export is broken, and they don't seem to be interested in fixing it.) Mister Wong # See this issue for import tweaks. SemanticScuttle # To correctly import the tags from a SemanticScuttle HTML export, edit the HTML file before importing and replace all occurences of tags= (lowercase) to TAGS= (uppercase). Scuttle # Shaarli cannot import data directly from Scuttle . However, you can use the third-party scuttle-to-shaarli tool to export the Scuttle database to the Netscape HTML format compatible with the Shaarli importer. Refind.com # You can use the third-party tool Derefind to convert refind.com bookmark exports to a format that can be imported into Shaarli. Other # The bookmarklet doesn't work # Some websites may disallow usage of bookmarklets through Content Security Policy (CSP) . Unfortunately, there is nothing Shaarli can do about it ( 1 , 2 , 3 . Under Opera, you can't drag'n drop the button: You have to right-click on it and add a bookmark to your personal toolbar. Changing the timestamp for a shaare # Look for <input type=\"hidden\" name=\"lf_linkdate\" value=\"{$link.linkdate}\"> in tpl/editlink.tpl (line 14) Replace type=\"hidden\" with type=\"text\" from this line A new date/time field becomes available in the edit/new Shaare dialog. You can set the timestamp manually by entering it in the format YYYMMDD_HHMMS . Clearing Shaarli caches # For debugging purposes: # clear raintpl cache and temporary files find /var/www/links/cache/ /var/www/links/pagecache/ /var/www/links/tmp/ -type f -exec rm -v '{}' \\; # if you have a php accelerator such as php-apcu, restart the webserver sudo systemctl restart apache2 Support # If the solutions above did not help, please: Come and ask question on the Gitter chat (also reachable via IRC ) Search for issues and Pull Requests if you find one that is related to the issue, feel free to comment and provide additional details (host/Shaarli setup...) check issues labeled feature , enhancement , and plugin if you would like a feature added to Shaarli. else, open a new issue , and provide information about the problem: what happens? - display glitches, invalid data, security flaws... what is your configuration? - OS, server version, activated extensions, web browser... is it reproducible?","title":"Troubleshooting"},{"location":"Troubleshooting/#troubleshooting","text":"First of all, ensure that both the web server and Shaarli are correctly configured.","title":"Troubleshooting"},{"location":"Troubleshooting/#login","text":"","title":"Login"},{"location":"Troubleshooting/#i-forgot-my-password","text":"Delete the file data/config.json.php and display the page again. You will be asked for a new login/password.","title":"I forgot my password!"},{"location":"Troubleshooting/#im-locked-out-login-bruteforce-protection","text":"Login form is protected against brute force attacks: 4 failed logins will ban the IP address from login for 30 minutes. Banned IPs can still browse Shaares. To remove the current IP bans, delete the file data/ipbans.php To list all login attempts, see data/log.txt (succesful/failed logins, bans/lifted bans)","title":"I'm locked out - Login bruteforce protection"},{"location":"Troubleshooting/#browser-issues","text":"","title":"Browser issues"},{"location":"Troubleshooting/#redirection-issues-http-referer","text":"Shaarli relies on HTTP_REFERER for some functions (like redirects and clicking on tags). If you have disabled or altered/spoofed HTTP referers in your browser, some features of Shaarli may not work as expected (depending on configuration and installed plugins), notably redirections between pages. Firefox Referer settings are available by browsing about:config and are documented here . network.http.referer.spoofSource = true in particular is known to break some functionality in Shaarli.","title":"Redirection issues (HTTP Referer)"},{"location":"Troubleshooting/#firefox-localhost-and-redirections","text":"localhost is not a proper Fully Qualified Domain Name (FQDN); if Firefox has been set up to spoof referers, or only accept requests from the same base domain/host, Shaarli redirections will not work properly. To solve this, assign a local domain to your host, e.g. localhost.lan in your hosts file and browse Shaarli at http://localhost.lan/.","title":"Firefox, localhost and redirections"},{"location":"Troubleshooting/#hosting-problems","text":"","title":"Hosting problems"},{"location":"Troubleshooting/#old-php-versions","text":"On hosts (such as free.fr ) which only support PHP 5.6, Shaarli v0.10.4 is the maximum supported version. At the root of your webspace create a sessions directory and a .htaccess file containing: <IfDefine Free> php56 1 </IfDefine> <Files \".ht*\"> Order allow,deny Deny from all Satisfy all </Files> Options -Indexes If you have an error such as: Parse error: syntax error, unexpected '=', expecting '(' in /links/index.php on line xxx , it means that your host is using PHP 4, not PHP 5. Shaarli requires PHP 5.1. Try changing the file extension to .php5 On 1and1 : If you add the link from the page (and not from the bookmarklet), Shaarli will no be able to get the title of the page. You will have to enter it manually. (Because they have disabled the ability to download a file through HTTP). If you have the error Warning: file_get_contents() [function.file-get-contents]: URL file-access is disabled in the server configuration in /\u2026/index.php on line xxx , it means that your host has disabled the ability to fetch a file by HTTP in the php config (Typically in 1and1 hosting). Bad host. Change host. Or comment the following lines: //list($status,$headers,$data) = getHTTP($url,4); // Short timeout to keep the application responsive. // FIXME: Decode charset according to charset specified in either 1) HTTP response headers or 2) <head> in html //if (strpos($status,'200 OK')) $title=html_extract_title($data); On hosts (such as free.fr ) which forbid outgoing HTTP requests, some thumbnails will not work. On hosts (such as free.fr ) which limit the number of FTP connections, setup your FTP client accordingly (else some files may be missing after upload). On lost-oasis , RSS doesn't work correctly, because of this message at the begining of the RSS/ATOM feed : <? // tout ce qui est charge ici (generalement des includes et require) est charge en permanence. ?> . To fix this, remove this message from php-include/prepend.php","title":"Old PHP versions"},{"location":"Troubleshooting/#dates-are-not-properly-formatted","text":"Shaarli tries to sniff the language of the browser (using HTTP_ACCEPT_LANGUAGE headers) and choose a date format accordingly. But Shaarli can only use the date formats (and more generally speaking, the locales) provided by the webserver. So even if you have a browser in French, you may end up with dates in US format (it's the case on sebsauvage.net :-( )","title":"Dates are not properly formatted"},{"location":"Troubleshooting/#my-session-expires-i-cant-stay-logged-in","text":"This can be caused by several things: Your php installation may not have a proper directory setup for session files. (eg. on Free.fr you need to create a session directory on the root of your website.) You may need to create the session directory of set it up. Most hosts regularly clean the temporary and session directories. Your host may be cleaning those directories too aggressively (eg.OVH hosts), forcing an expire of the session. You may want to set the session directory in your web root. (eg. Create the sessions subdirectory and add ini_set('session.save_path', $_SERVER['DOCUMENT_ROOT'].'/../sessions'); . Make sure this directory is not browsable !) If your IP address changes during surfing, Shaarli will force expire your session for security reasons (to prevent session cookie hijacking). This can happen when surfing from WiFi or 3G (you may have switched WiFi/3G access point), or in some corporate/university proxies which use load balancing (and may have proxies with several external IP addresses). Some browser addons may interfer with HTTP headers (ipfuck/ipflood/GreaseMonkey\u2026). Try disabling those. You may be using OperaTurbo or OperaMini, which use their own proxies which may change from time to time. If you have another application on the same webserver where Shaarli is installed, these application may forcefully expire php sessions.","title":"My session expires! I can't stay logged in"},{"location":"Troubleshooting/#old-apache-versions-internal-server-error","text":"If you hosting provider only provides apache 2.2 and no support for mod_version , .htaccess files may cause 500 errors (Internal Server Error). See this workaround .","title":"Old apache versions, Internal Server Error"},{"location":"Troubleshooting/#sessions-do-not-seem-to-work-correctly-on-your-server","text":"Follow the instructions in the error message. Make sure you are accessing shaarli via a direct IP address or a proper hostname. If you have no dots in the hostname (e.g. localhost or http://my-webserver/shaarli/ ), some browsers will not store cookies at all (this respects the HTTP cookie specification ).","title":"Sessions do not seem to work correctly on your server"},{"location":"Troubleshooting/#error-406-not-acceptable","text":"If attempting to save a link results in a Not acceptable error (HTTP status code of 406 ), it is likely due to strict settings for mod_security (a module used with Apache). This cannot be mitigated by reconfiguring Shaarli itself, and must be dealt with at the level of the underlying web server instead. On some shared hosting services (such as Bluehost ), mod_security is enabled by default, so the recommended course of action is to get in touch with the helpdesk and ask them to disable mod_security for your domain, sub-domain, or the subdirectory where Shaarli is installed. Ideally, you want to narrow it down to a very specific location, so as to continue reaping the benefits of mod_security elsewhere on your domain. If asked for specific, you can refer support staff to this issue , where more technical details are available.","title":"Error 406 \"Not acceptable\""},{"location":"Troubleshooting/#timeout-during-long-lasting-operations","text":"You may need to adjust timeouts to larger values in your reverse proxy configuration if you're getting 504 Gateway Timeout errors during long-lasting operations (like importing many bookmarks from HTML, or batch deleting tags) on slow hardware. The PHP setting max_execution_time may also need to be adjusted for your specific setup. See issues #1854 and #1910 .","title":"Timeout during long-lasting operations"},{"location":"Troubleshooting/#upgrades","text":"","title":"Upgrades"},{"location":"Troubleshooting/#you-must-specify-an-integer-as-a-key","text":"In v0.8.1 we changed how Shaare keys are handled (from timestamps to incremental integers). Take a look at data/updates.txt content.","title":"You must specify an integer as a key"},{"location":"Troubleshooting/#updatestxt-contains-updatemethoddatastoreids","text":"Try to delete it and refresh your page while being logged in.","title":"updates.txt contains updateMethodDatastoreIds"},{"location":"Troubleshooting/#updatestxt-doesnt-exist-or-doesnt-contain-updatemethoddatastoreids","text":"Create data/updates.txt if it doesn't exist Paste this string in the update file ;updateMethodRenameDashTags; Login to Shaarli Delete the update file Refresh","title":"updates.txt doesn't exist or doesn't contain updateMethodDatastoreIds"},{"location":"Troubleshooting/#importexport","text":"","title":"Import/export"},{"location":"Troubleshooting/#importing-shaarli-data-to-firefox","text":"In Firefox, open the bookmark manager ( Bookmarks menu > Show all bookmarks or Ctrl+Shift+B ), select Import and Backup > Import bookmarks in HTML format Make sure the Prepend note permalinks with this Shaarli instance's URL box is checked when exporting, so that text-only/notes Shaares still point to the Shaarli instance you exported them from. Depending on the number of bookmarks, the import can take some time. You may be interested in these Firefox addons to manage bookmarks imported from Shaarli Bookmark Deduplicator - provides an easy way to deduplicate your bookmarks TagSieve - browse your bookmarks by their tags","title":"Importing shaarli data to Firefox"},{"location":"Troubleshooting/#diigo","text":"If you export your bookmark from Diigo, make sure you use the Delicious export, not the Netscape export. (Their Netscape export is broken, and they don't seem to be interested in fixing it.)","title":"Diigo"},{"location":"Troubleshooting/#mister-wong","text":"See this issue for import tweaks.","title":"Mister Wong"},{"location":"Troubleshooting/#semanticscuttle","text":"To correctly import the tags from a SemanticScuttle HTML export, edit the HTML file before importing and replace all occurences of tags= (lowercase) to TAGS= (uppercase).","title":"SemanticScuttle"},{"location":"Troubleshooting/#scuttle","text":"Shaarli cannot import data directly from Scuttle . However, you can use the third-party scuttle-to-shaarli tool to export the Scuttle database to the Netscape HTML format compatible with the Shaarli importer.","title":"Scuttle"},{"location":"Troubleshooting/#refindcom","text":"You can use the third-party tool Derefind to convert refind.com bookmark exports to a format that can be imported into Shaarli.","title":"Refind.com"},{"location":"Troubleshooting/#other","text":"","title":"Other"},{"location":"Troubleshooting/#the-bookmarklet-doesnt-work","text":"Some websites may disallow usage of bookmarklets through Content Security Policy (CSP) . Unfortunately, there is nothing Shaarli can do about it ( 1 , 2 , 3 . Under Opera, you can't drag'n drop the button: You have to right-click on it and add a bookmark to your personal toolbar.","title":"The bookmarklet doesn't work"},{"location":"Troubleshooting/#changing-the-timestamp-for-a-shaare","text":"Look for <input type=\"hidden\" name=\"lf_linkdate\" value=\"{$link.linkdate}\"> in tpl/editlink.tpl (line 14) Replace type=\"hidden\" with type=\"text\" from this line A new date/time field becomes available in the edit/new Shaare dialog. You can set the timestamp manually by entering it in the format YYYMMDD_HHMMS .","title":"Changing the timestamp for a shaare"},{"location":"Troubleshooting/#clearing-shaarli-caches","text":"For debugging purposes: # clear raintpl cache and temporary files find /var/www/links/cache/ /var/www/links/pagecache/ /var/www/links/tmp/ -type f -exec rm -v '{}' \\; # if you have a php accelerator such as php-apcu, restart the webserver sudo systemctl restart apache2","title":"Clearing Shaarli caches"},{"location":"Troubleshooting/#support","text":"If the solutions above did not help, please: Come and ask question on the Gitter chat (also reachable via IRC ) Search for issues and Pull Requests if you find one that is related to the issue, feel free to comment and provide additional details (host/Shaarli setup...) check issues labeled feature , enhancement , and plugin if you would like a feature added to Shaarli. else, open a new issue , and provide information about the problem: what happens? - display glitches, invalid data, security flaws... what is your configuration? - OS, server version, activated extensions, web browser... is it reproducible?","title":"Support"},{"location":"Upgrade-and-migration/","text":"Upgrade and migration # Note your current version # If anything goes wrong, it's important for us to know which version you're upgrading from. The current version is present in the shaarli_version.php file. Backup your data # Shaarli stores all user data and configuration under the data directory. Backup this repository before upgrading Shaarli. You will need to restore it after the following upgrade steps. sudo cp -r /var/www/shaarli.mydomain.org/data ~/shaarli-data-backup Upgrading from ZIP archives # If you installed Shaarli from a release ZIP archive : # Download the archive to the server, and extract it cd ~ wget https://github.com/shaarli/Shaarli/releases/download/v0.X.Y/shaarli-v0.X.Y-full.zip unzip shaarli-v0.X.Y-full.zip # overwrite your Shaarli installation with the new release **All data will be lost, see _Backup your data_ above.** sudo rsync -avP --delete Shaarli/ /var/www/shaarli.mydomain.org/ # restore file permissions as described on the installation page sudo chown -R root:www-data /var/www/shaarli.mydomain.org sudo chmod -R g+rX /var/www/shaarli.mydomain.org sudo chmod -R g+rwX /var/www/shaarli.mydomain.org/{cache/,data/,pagecache/,tmp/} # restore backups of the data directory sudo cp -r ~/shaarli-data-backup/* /var/www/shaarli.mydomain.org/data/ # If you use gettext mode for translations (not the default), reload your web server. sudo systemctl restart apache2 sudo systemctl restart nginx If you don't have shell access (eg. on shared hosting), backup the shaarli data directory, download the ZIP archive locally, extract it, upload it to the server using file transfer, and restore the data directory backup. Access your fresh Shaarli installation from a web browser; the configuration and data store will then be automatically updated, and new settings added to data/config.json.php (see Shaarli configuration for more details). Upgrading from Git # If you have installed Shaarli from sources : # pull new changes from your local clone cd /var/www/shaarli.mydomain.org/ sudo git pull # update PHP dependencies (Shaarli >= v0.8) sudo composer install --no-dev # update translations (Shaarli >= v0.9.2) sudo make translate # If you use translations in gettext mode (not the default), reload your web server. sudo systemctl reload apache sudo systemctl reload nginx # update front-end dependencies (Shaarli >= v0.10.0) sudo make build_frontend # restore file permissions as described on the installation page sudo chown -R root:www-data /var/www/shaarli.mydomain.org sudo chmod -R g+rX /var/www/shaarli.mydomain.org sudo chmod -R g+rwX /var/www/shaarli.mydomain.org/{cache/,data/,pagecache/,tmp/} Access your fresh Shaarli installation from a web browser; the configuration and data store will then be automatically updated, and new settings added to data/config.json.php (see Shaarli configuration for more details). Migrating and upgrading from Sebsauvage's repository # If you have installed Shaarli from Sebsauvage's original Git repository , you can use Git remotes to update your working copy. The following guide assumes that: you have a basic knowledge of Git branching and remote repositories the default remote is named origin and points to Sebsauvage's repository the current branch is master if you have personal branches containing customizations, you will need to rebase them after the upgrade; beware though, a lot of changes have been made since the community fork has been created, so things are very likely to break! the working copy is clean: no versioned file has been locally modified no untracked files are present Step 0: show repository information # $ cd /path/to/shaarli $ git remote -v origin https://github.com/sebsauvage/Shaarli (fetch) origin https://github.com/sebsauvage/Shaarli (push) $ git branch -vv * master 029f75f [origin/master] Update README.md $ git status On branch master Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean Step 1: update Git remotes # $ git remote rename origin sebsauvage $ git remote -v sebsauvage https://github.com/sebsauvage/Shaarli (fetch) sebsauvage https://github.com/sebsauvage/Shaarli (push) $ git remote add origin https://github.com/shaarli/Shaarli $ git fetch origin remote: Counting objects: 3015, done. remote: Compressing objects: 100% (19/19), done. remote: Total 3015 (delta 446), reused 457 (delta 446), pack-reused 2550 Receiving objects: 100% (3015/3015), 2.59 MiB | 918.00 KiB/s, done. Resolving deltas: 100% (1899/1899), completed with 48 local objects. From https://github.com/shaarli/Shaarli * [new branch] master -> origin/master * [new branch] stable -> origin/stable [...] * [new tag] v0.6.4 -> v0.6.4 * [new tag] v0.7.0 -> v0.7.0 Step 2: use the stable community branch # $ git checkout origin/stable -b stable Branch stable set up to track remote branch stable from origin. Switched to a new branch 'stable' $ git branch -vv master 029f75f [sebsauvage/master] Update README.md * stable 890afc3 [origin/stable] Merge pull request #509 from ArthurHoaro/v0.6.5 Shaarli >= v0.8.x : install/update third-party PHP dependencies using Composer : $ composer install --no-dev Loading composer repositories with package information Updating dependencies - Installing shaarli/netscape-bookmark-parser (v1.0.1) Downloading: 100% Shaarli >= v0.9.2 supports translations: $ make translate If you use translations in gettext mode, reload your web server. Shaarli >= v0.10.0 manages its front-end dependencies with nodejs. You need to install yarn : $ make build_frontend Optionally, you can delete information related to the legacy version: $ git branch -D master Deleted branch master (was 029f75f). $ git remote remove sebsauvage $ git remote -v origin https://github.com/shaarli/Shaarli (fetch) origin https://github.com/shaarli/Shaarli (push) $ git gc Counting objects: 3317, done. Delta compression using up to 8 threads. Compressing objects: 100% (1237/1237), done. Writing objects: 100% (3317/3317), done. Total 3317 (delta 2050), reused 3301 (delta 2034)to Step 3: configuration # After migrating, access your fresh Shaarli installation from a web browser; the configuration will then be automatically updated, and new settings added to data/config.json.php (see Shaarli configuration for more details). Troubleshooting # If the solutions provided here don't work, see Troubleshooting and/or open an issue specifying which version you're upgrading from and to.","title":"Upgrade and migration"},{"location":"Upgrade-and-migration/#upgrade-and-migration","text":"","title":"Upgrade and migration"},{"location":"Upgrade-and-migration/#note-your-current-version","text":"If anything goes wrong, it's important for us to know which version you're upgrading from. The current version is present in the shaarli_version.php file.","title":"Note your current version"},{"location":"Upgrade-and-migration/#backup-your-data","text":"Shaarli stores all user data and configuration under the data directory. Backup this repository before upgrading Shaarli. You will need to restore it after the following upgrade steps. sudo cp -r /var/www/shaarli.mydomain.org/data ~/shaarli-data-backup","title":"Backup your data"},{"location":"Upgrade-and-migration/#upgrading-from-zip-archives","text":"If you installed Shaarli from a release ZIP archive : # Download the archive to the server, and extract it cd ~ wget https://github.com/shaarli/Shaarli/releases/download/v0.X.Y/shaarli-v0.X.Y-full.zip unzip shaarli-v0.X.Y-full.zip # overwrite your Shaarli installation with the new release **All data will be lost, see _Backup your data_ above.** sudo rsync -avP --delete Shaarli/ /var/www/shaarli.mydomain.org/ # restore file permissions as described on the installation page sudo chown -R root:www-data /var/www/shaarli.mydomain.org sudo chmod -R g+rX /var/www/shaarli.mydomain.org sudo chmod -R g+rwX /var/www/shaarli.mydomain.org/{cache/,data/,pagecache/,tmp/} # restore backups of the data directory sudo cp -r ~/shaarli-data-backup/* /var/www/shaarli.mydomain.org/data/ # If you use gettext mode for translations (not the default), reload your web server. sudo systemctl restart apache2 sudo systemctl restart nginx If you don't have shell access (eg. on shared hosting), backup the shaarli data directory, download the ZIP archive locally, extract it, upload it to the server using file transfer, and restore the data directory backup. Access your fresh Shaarli installation from a web browser; the configuration and data store will then be automatically updated, and new settings added to data/config.json.php (see Shaarli configuration for more details).","title":"Upgrading from ZIP archives"},{"location":"Upgrade-and-migration/#upgrading-from-git","text":"If you have installed Shaarli from sources : # pull new changes from your local clone cd /var/www/shaarli.mydomain.org/ sudo git pull # update PHP dependencies (Shaarli >= v0.8) sudo composer install --no-dev # update translations (Shaarli >= v0.9.2) sudo make translate # If you use translations in gettext mode (not the default), reload your web server. sudo systemctl reload apache sudo systemctl reload nginx # update front-end dependencies (Shaarli >= v0.10.0) sudo make build_frontend # restore file permissions as described on the installation page sudo chown -R root:www-data /var/www/shaarli.mydomain.org sudo chmod -R g+rX /var/www/shaarli.mydomain.org sudo chmod -R g+rwX /var/www/shaarli.mydomain.org/{cache/,data/,pagecache/,tmp/} Access your fresh Shaarli installation from a web browser; the configuration and data store will then be automatically updated, and new settings added to data/config.json.php (see Shaarli configuration for more details).","title":"Upgrading from Git"},{"location":"Upgrade-and-migration/#migrating-and-upgrading-from-sebsauvages-repository","text":"If you have installed Shaarli from Sebsauvage's original Git repository , you can use Git remotes to update your working copy. The following guide assumes that: you have a basic knowledge of Git branching and remote repositories the default remote is named origin and points to Sebsauvage's repository the current branch is master if you have personal branches containing customizations, you will need to rebase them after the upgrade; beware though, a lot of changes have been made since the community fork has been created, so things are very likely to break! the working copy is clean: no versioned file has been locally modified no untracked files are present","title":"Migrating and upgrading from Sebsauvage's repository"},{"location":"Upgrade-and-migration/#step-0-show-repository-information","text":"$ cd /path/to/shaarli $ git remote -v origin https://github.com/sebsauvage/Shaarli (fetch) origin https://github.com/sebsauvage/Shaarli (push) $ git branch -vv * master 029f75f [origin/master] Update README.md $ git status On branch master Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean","title":"Step 0: show repository information"},{"location":"Upgrade-and-migration/#step-1-update-git-remotes","text":"$ git remote rename origin sebsauvage $ git remote -v sebsauvage https://github.com/sebsauvage/Shaarli (fetch) sebsauvage https://github.com/sebsauvage/Shaarli (push) $ git remote add origin https://github.com/shaarli/Shaarli $ git fetch origin remote: Counting objects: 3015, done. remote: Compressing objects: 100% (19/19), done. remote: Total 3015 (delta 446), reused 457 (delta 446), pack-reused 2550 Receiving objects: 100% (3015/3015), 2.59 MiB | 918.00 KiB/s, done. Resolving deltas: 100% (1899/1899), completed with 48 local objects. From https://github.com/shaarli/Shaarli * [new branch] master -> origin/master * [new branch] stable -> origin/stable [...] * [new tag] v0.6.4 -> v0.6.4 * [new tag] v0.7.0 -> v0.7.0","title":"Step 1: update Git remotes"},{"location":"Upgrade-and-migration/#step-2-use-the-stable-community-branch","text":"$ git checkout origin/stable -b stable Branch stable set up to track remote branch stable from origin. Switched to a new branch 'stable' $ git branch -vv master 029f75f [sebsauvage/master] Update README.md * stable 890afc3 [origin/stable] Merge pull request #509 from ArthurHoaro/v0.6.5 Shaarli >= v0.8.x : install/update third-party PHP dependencies using Composer : $ composer install --no-dev Loading composer repositories with package information Updating dependencies - Installing shaarli/netscape-bookmark-parser (v1.0.1) Downloading: 100% Shaarli >= v0.9.2 supports translations: $ make translate If you use translations in gettext mode, reload your web server. Shaarli >= v0.10.0 manages its front-end dependencies with nodejs. You need to install yarn : $ make build_frontend Optionally, you can delete information related to the legacy version: $ git branch -D master Deleted branch master (was 029f75f). $ git remote remove sebsauvage $ git remote -v origin https://github.com/shaarli/Shaarli (fetch) origin https://github.com/shaarli/Shaarli (push) $ git gc Counting objects: 3317, done. Delta compression using up to 8 threads. Compressing objects: 100% (1237/1237), done. Writing objects: 100% (3317/3317), done. Total 3317 (delta 2050), reused 3301 (delta 2034)to","title":"Step 2: use the stable community branch"},{"location":"Upgrade-and-migration/#step-3-configuration","text":"After migrating, access your fresh Shaarli installation from a web browser; the configuration will then be automatically updated, and new settings added to data/config.json.php (see Shaarli configuration for more details).","title":"Step 3: configuration"},{"location":"Upgrade-and-migration/#troubleshooting","text":"If the solutions provided here don't work, see Troubleshooting and/or open an issue specifying which version you're upgrading from and to.","title":"Troubleshooting"},{"location":"Usage/","text":"Features # For any item posted to Shaarli (called a Shaare ), you can customize the following aspects: URL to link to Title Free-text description Tags Public/private status Adding/editing Shaares # While logged in to your Shaarli, you can add, edit or delete Shaares: Using the +Shaare button: enter the URL you want to share, click Add link , fill in the details of your Shaare, and Save Using the Bookmarklet : drag the \u271aShaare link button from the Tools page to your browser's bookmarks bar, click it to share the current page. Using apps and browser addons Using the REST API Any Shaare can edited by clicking its Edit button. The Shaare a new link dialog also allows you to create multiple bookmarks at once (unfold the bulk creation section and add one URL per line). Tags # Tags can be be used to organize and categorize your Shaares: You can rename, merge and delete tags from the Tools menu or the tag cloud/list Tags are auto-completed (from the list of existing tags) in all dialogs Tags can be combined with text in search queries Public/private Shaares # Additional filter buttons can be found at the top left of the Shaare list only when logged in : Only show private Shaares: Private shares can be searched by clicking the only show private links toggle button top left of the Shaares list (only when logged in) Permalinks # Permalinks are fixed, short links attached to each Shaare. Editing a Shaare will not change it's permalink, each permalink always points to the latest revision of a Shaare. Text-only (note) Shaares # Shaarli can be used as a minimal blog, notepad, pastebin...: While adding or editing a Shaare, leave the URL field blank to create a text-only (\"note\") post. This allows you to post any kind of text content, such as blog articles, private or public notes, snippets... There is no character limit! You can access your post from its permalink. Search # Plain text search: Use Search text to search in all fields of all Shaares (Title, URL, Description...). Use double-quotes (example \"exact search\" ) to search for the exact expression. Tags search: Filter by tags allow only displaying Shaares tagged with one or multiple tags (use space to separate tags). A plus sign + is optional and will restrict suggested tags to only those starting with the string (example: pr will hint apron and printer but +pr will only hint printer). Hidden tags: tags starting with a dot . (example .secret ) are private. They can only be seen and searched when logged in. Exclude text/tags: Use the - operator before a word or tag to exclude Shaares matching this word from search results ( NOT operator). Optional tags: Use the ~ operator before multiple tags to search for any one of them ( OR operator). Wildcard tag search: An asterisk ( * ) can be used as a wildcard and will match any number of characters. Wildcards can appear in the middle of a search term or at the end (example: pro*in* will match programming and protein). Untagged links: Shaares without tags can be searched by clicking the untagged toggle button top left of the Shaares list (only when logged in). Both exclude patterns and exact searches can be combined with normal searches (example \"exact search\" term otherterm -notthis \"very exact\" stuff -notagain ). Only AND (and NOT) text search is currently supported. Active search terms are displayed on top of the link list. To remove terms/tags from the current search, click the x next to any of them, or simply clear text/tag search fields. Tag cloud # The Tag cloud page displays a \"cloud\" or list view of all tags in your Shaarli (most frequently used tags are displayed with a bigger font size) Tags list: click on Most used or Alphabetical to display tags as a list. You can also edit/delete tags for this page. Click on any tag to search all Shaares matching this tag. Filtering the tag cloud/list: Click on the counter next to a tag to show other tags of Shaares with this tag. Repeat this any number of times to further filter the tag cloud. Click List all links with those tags to display Shaares matching your current tag filter set. RSS feeds # RSS/ATOM feeds feeds are available (in ATOM with /feed/atom and RSS with /feed/rss ) Filtering RSS feeds: RSS feeds and picture wall can also be restricted to only return items matching a text/tag search. For example, search for photography (text or tags) in Shaarli, then click the RSS Feed button. A feed with only matching results is displayed. Add the &nb parameter in feed URLs to specify the number of Shaares you want in a feed (default if not specified: 50 ). The keyword all is available if you want everything. Add the &permalinks parameter in feed URLs to point permalinks to the corresponding Shaarli entry/link instead of the direct, Shaare URL attribute # examples https://shaarli.mydomain.org/feed/atom?permalinks https://shaarli.mydomain.org/feed/atom?permalinks&nb=42 https://shaarli.mydomain.org/feed/atom?permalinks&nb=all https://shaarli.mydomain.org/feed/rss?searchtags=nature https://shaarli.mydomain.org/links/picture-wall?searchterm=poney Picture wall # The picture wall can be filtered by text or tags search in the same way as RSS feeds Import/export # To export Shaares as a HTML file , under Tools > Export , choose: Export all to export both public and private Shaares Export public to export public Shaares only Export private to export private Shaares only Restore by using the Import feature. These exports contain the full data (URL, title, tags, date, description, public/private status of your Shaares) They can also be imported to your web browser bookmarks. To import a HTML bookmarks file exported from your browser, just use the Import feature. For each \"folder\" in the bookmarks you imported, a new tag will be created (for example a bookmark in Movies > Sci-fi folder will be tagged Movies Sci-fi ).","title":"Usage"},{"location":"Usage/#features","text":"For any item posted to Shaarli (called a Shaare ), you can customize the following aspects: URL to link to Title Free-text description Tags Public/private status","title":"Features"},{"location":"Usage/#addingediting-shaares","text":"While logged in to your Shaarli, you can add, edit or delete Shaares: Using the +Shaare button: enter the URL you want to share, click Add link , fill in the details of your Shaare, and Save Using the Bookmarklet : drag the \u271aShaare link button from the Tools page to your browser's bookmarks bar, click it to share the current page. Using apps and browser addons Using the REST API Any Shaare can edited by clicking its Edit button. The Shaare a new link dialog also allows you to create multiple bookmarks at once (unfold the bulk creation section and add one URL per line).","title":"Adding/editing Shaares"},{"location":"Usage/#tags","text":"Tags can be be used to organize and categorize your Shaares: You can rename, merge and delete tags from the Tools menu or the tag cloud/list Tags are auto-completed (from the list of existing tags) in all dialogs Tags can be combined with text in search queries","title":"Tags"},{"location":"Usage/#publicprivate-shaares","text":"Additional filter buttons can be found at the top left of the Shaare list only when logged in : Only show private Shaares: Private shares can be searched by clicking the only show private links toggle button top left of the Shaares list (only when logged in)","title":"Public/private Shaares"},{"location":"Usage/#permalinks","text":"Permalinks are fixed, short links attached to each Shaare. Editing a Shaare will not change it's permalink, each permalink always points to the latest revision of a Shaare.","title":"Permalinks"},{"location":"Usage/#text-only-note-shaares","text":"Shaarli can be used as a minimal blog, notepad, pastebin...: While adding or editing a Shaare, leave the URL field blank to create a text-only (\"note\") post. This allows you to post any kind of text content, such as blog articles, private or public notes, snippets... There is no character limit! You can access your post from its permalink.","title":"Text-only (note) Shaares"},{"location":"Usage/#search","text":"Plain text search: Use Search text to search in all fields of all Shaares (Title, URL, Description...). Use double-quotes (example \"exact search\" ) to search for the exact expression. Tags search: Filter by tags allow only displaying Shaares tagged with one or multiple tags (use space to separate tags). A plus sign + is optional and will restrict suggested tags to only those starting with the string (example: pr will hint apron and printer but +pr will only hint printer). Hidden tags: tags starting with a dot . (example .secret ) are private. They can only be seen and searched when logged in. Exclude text/tags: Use the - operator before a word or tag to exclude Shaares matching this word from search results ( NOT operator). Optional tags: Use the ~ operator before multiple tags to search for any one of them ( OR operator). Wildcard tag search: An asterisk ( * ) can be used as a wildcard and will match any number of characters. Wildcards can appear in the middle of a search term or at the end (example: pro*in* will match programming and protein). Untagged links: Shaares without tags can be searched by clicking the untagged toggle button top left of the Shaares list (only when logged in). Both exclude patterns and exact searches can be combined with normal searches (example \"exact search\" term otherterm -notthis \"very exact\" stuff -notagain ). Only AND (and NOT) text search is currently supported. Active search terms are displayed on top of the link list. To remove terms/tags from the current search, click the x next to any of them, or simply clear text/tag search fields.","title":"Search"},{"location":"Usage/#tag-cloud","text":"The Tag cloud page displays a \"cloud\" or list view of all tags in your Shaarli (most frequently used tags are displayed with a bigger font size) Tags list: click on Most used or Alphabetical to display tags as a list. You can also edit/delete tags for this page. Click on any tag to search all Shaares matching this tag. Filtering the tag cloud/list: Click on the counter next to a tag to show other tags of Shaares with this tag. Repeat this any number of times to further filter the tag cloud. Click List all links with those tags to display Shaares matching your current tag filter set.","title":"Tag cloud"},{"location":"Usage/#rss-feeds","text":"RSS/ATOM feeds feeds are available (in ATOM with /feed/atom and RSS with /feed/rss ) Filtering RSS feeds: RSS feeds and picture wall can also be restricted to only return items matching a text/tag search. For example, search for photography (text or tags) in Shaarli, then click the RSS Feed button. A feed with only matching results is displayed. Add the &nb parameter in feed URLs to specify the number of Shaares you want in a feed (default if not specified: 50 ). The keyword all is available if you want everything. Add the &permalinks parameter in feed URLs to point permalinks to the corresponding Shaarli entry/link instead of the direct, Shaare URL attribute # examples https://shaarli.mydomain.org/feed/atom?permalinks https://shaarli.mydomain.org/feed/atom?permalinks&nb=42 https://shaarli.mydomain.org/feed/atom?permalinks&nb=all https://shaarli.mydomain.org/feed/rss?searchtags=nature https://shaarli.mydomain.org/links/picture-wall?searchterm=poney","title":"RSS feeds"},{"location":"Usage/#picture-wall","text":"The picture wall can be filtered by text or tags search in the same way as RSS feeds","title":"Picture wall"},{"location":"Usage/#importexport","text":"To export Shaares as a HTML file , under Tools > Export , choose: Export all to export both public and private Shaares Export public to export public Shaares only Export private to export private Shaares only Restore by using the Import feature. These exports contain the full data (URL, title, tags, date, description, public/private status of your Shaares) They can also be imported to your web browser bookmarks. To import a HTML bookmarks file exported from your browser, just use the Import feature. For each \"folder\" in the bookmarks you imported, a new tag will be created (for example a bookmark in Movies > Sci-fi folder will be tagged Movies Sci-fi ).","title":"Import/export"},{"location":"dev/Development/","text":"Development # Please read Contributing to Shaarli Guidelines # Unit tests Javascript linting - Shaarli uses Airbnb JavaScript Style Guide . Run make eslint to check JS style. GnuPG signature for tags/releases Third-party libraries # CSS: Yahoo UI CSS Reset - standardize cross-browser rendering Javascript: Awesomeplete ( GitHub ) - autocompletion in input forms bLazy ( GitHub ) - lazy loading for thumbnails qr.js ( GitHub ) - QR code generation PHP (managed through composer.json ): RainTPL - HTML templating for PHP shaarli/netscape-bookmark-parser - Import bookmarks from Netscape files erusev/parsedown - Parse MarkDown syntax for the MarkDown plugin slim/slim - Handle routes and middleware for the REST API ArthurHoaro/web-thumbnailer - PHP library which will retrieve a thumbnail for any given URL pubsubhubbub/publisher - A PubSubHubbub publisher module for PHP. gettext/gettext - PHP library to collect and manipulate gettext (.po, .mo, .php, .json, etc) Security # The password is salted, hashed and stored in the data subdirectory, in a PHP file, and protected by htaccess. Even if the webserver does not support htaccess, the hash is not readable by URL. Even if the .php file is stolen, the password cannot deduced from the hash. The salt prevents rainbow-tables attacks. Directories are protected using .htaccess files Forms are protected against XSRF : Forms which act on data (save,delete\u2026) contain a token generated by the server. Any posted form which does not contain a valid token is rejected. Any token can only be used once. Tokens are attached to the session and cannot be reused in another session. Sessions automatically expire after 60 minutes. Sessions are protected against hijacking: the session ID cannot be used from a different IP address. Links are stored as an associative array which is serialized, compressed (with deflate), base64-encoded and saved as a comment in a .php file - even if the server does not support .htaccess files, the data file will still not be readable by URL. Bruteforce protection: Successful and failed login attempts are logged - IP bans are enforced after a configurable amount of failures. Logs can also be used consumed by fail2ban A pop-up notification is shown when a new release is available. Link structure # Every link available through the LinkDB object is represented as an array containing the following fields: id (integer): Unique identifier. title (string): Title of the link. url (string): URL of the link. Used for displayable links (without redirector, url encoding, etc.). Can be absolute or relative for Notes. real_url (string): Real destination URL, can be redirected, encoded, etc. shorturl (string): Permalink small hash. description (string): Link text description. private (boolean): whether the link is private or not. tags (string): all link tags separated by a single space thumbnail (string|boolean): relative path of the thumbnail cache file, or false if there isn't any. created (DateTime): link creation date time. updated (DateTime): last modification date time. Small hashes are used to make a link to an entry in Shaarli. They are unique: the date of the item (eg. 20110923_150523 ) is hashed with CRC32, then converted to base64 and some characters are replaced. They are always 6 characters longs and use only A-Z a-z 0-9 - _ and @ . Directory structure # Here is the directory structure of Shaarli and the purpose of the different files: index.php # Main program application/ # Shaarli classes \u251c\u2500\u2500 LinkDB.php ... \u2514\u2500\u2500 Utils.php tests/ # Shaarli unitary & functional tests \u251c\u2500\u2500 LinkDBTest.php ... \u251c\u2500\u2500 utils # utilities to ease testing \u2502 \u2514\u2500\u2500 ReferenceLinkDB.php \u2514\u2500\u2500 UtilsTest.php assets/ \u251c\u2500\u2500 common/ # Assets shared by multiple themes \u251c\u2500\u2500 ... \u251c\u2500\u2500 default/ # Assets for the default template, before compilation \u251c\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 img/ # Images used by the default theme \u251c\u2500\u2500 js/ # JavaScript files in ES6 syntax \u251c\u2500\u2500 scss/ # SASS files \u2514\u2500\u2500 vintage/ # Assets for the vintage template, before compilation \u2514\u2500\u2500 ... COPYING # Shaarli license inc/ # static assets and 3rd party libraries \u2514\u2500\u2500 rain.tpl.class.php # RainTPL templating library images/ # Images and icons used in Shaarli data/ # data storage: bookmark database, configuration, logs, banlist... \u251c\u2500\u2500 config.json.php # Shaarli configuration (login, password, timezone, title...) \u251c\u2500\u2500 datastore.php # Your link database (compressed). \u251c\u2500\u2500 ipban.php # IP address ban system data \u251c\u2500\u2500 lastupdatecheck.txt # Update check timestamp file \u2514\u2500\u2500 log.txt # login/IPban log. tpl/ # RainTPL templates for Shaarli. They are used to build the pages. \u251c\u2500\u2500 default/ # Default Shaarli theme \u251c\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 img/ # Images \u251c\u2500\u2500 js/ # JavaScript files compiled by Babel and compatible with all browsers \u251c\u2500\u2500 css/ # CSS files compiled with SASS \u2514\u2500\u2500 vintage/ # Legacy Shaarli theme \u2514\u2500\u2500 ... cache/ # thumbnails cache # This directory is automatically created. You can erase it anytime you want. tmp/ # Temporary directory for compiled RainTPL templates. # This directory is automatically created. You can erase it anytime you want. vendor/ # Third-party dependencies. This directory is created by Composer Shaarli needs read access to: the root index.php file the application/ , plugins/ and inc/ directories (recursively) Shaarli needs read/write access to the cache/ , data/ , pagecache/ , and tmp/ directories Automation # A Makefile is available to perform project-related operations: Static analysis - check that the code is compliant to PHP conventions Unit tests - ensure there are no regressions introduced by new commits Documentation - generate a local HTML copy of the markdown documentation Continuous Integration # Github Actions is a Continuous Integration build server, that runs a build: each time a commit is pushed to any branch each time a Pull Request is submitted or updated After all jobs have finished, Github Actions returns the results to GitHub: a status icon represents the result for the master branch: Pull Requests are updated with the Github Actions build result. Github Actions is also used to build and push Docker images to https://github.com/shaarli/Shaarli/pkgs/container/shaarli for the master branch and on every git tag / release . See .github/workflows/ . Documentation # mkdocs is used to convert markdown documentation to HTML pages. The public documentation website is rendered and hosted by readthedocs.org . A copy of the documentation is also included in prebuilt release archives ( doc/html/ path in your Shaarli installation). To generate the HTML documentation locally, install a recent version of Python setuptools and run make doc . Static analysis # Patches should try to stick to the PHP Standard Recommendations (PSR), and must follow: PSR-1 - Basic Coding Standard PSR-2 - Coding Style Guide PSR-12 - Extended Coding Style Guide These are enforced on pull requests using our Continuous Integration tools with PHP Code Sniffer . Static analysis tools are installed with Composer dependencies, and used through Shaarli's Makefile with make code_sniffer . For an overview of the available features, see: Code quality: Makefile to run static code checkers (#124) Apply PHP Code Sniffer to Shaarli code base (#1635)","title":"Development"},{"location":"dev/Development/#development","text":"Please read Contributing to Shaarli","title":"Development"},{"location":"dev/Development/#guidelines","text":"Unit tests Javascript linting - Shaarli uses Airbnb JavaScript Style Guide . Run make eslint to check JS style. GnuPG signature for tags/releases","title":"Guidelines"},{"location":"dev/Development/#third-party-libraries","text":"CSS: Yahoo UI CSS Reset - standardize cross-browser rendering Javascript: Awesomeplete ( GitHub ) - autocompletion in input forms bLazy ( GitHub ) - lazy loading for thumbnails qr.js ( GitHub ) - QR code generation PHP (managed through composer.json ): RainTPL - HTML templating for PHP shaarli/netscape-bookmark-parser - Import bookmarks from Netscape files erusev/parsedown - Parse MarkDown syntax for the MarkDown plugin slim/slim - Handle routes and middleware for the REST API ArthurHoaro/web-thumbnailer - PHP library which will retrieve a thumbnail for any given URL pubsubhubbub/publisher - A PubSubHubbub publisher module for PHP. gettext/gettext - PHP library to collect and manipulate gettext (.po, .mo, .php, .json, etc)","title":"Third-party libraries"},{"location":"dev/Development/#security","text":"The password is salted, hashed and stored in the data subdirectory, in a PHP file, and protected by htaccess. Even if the webserver does not support htaccess, the hash is not readable by URL. Even if the .php file is stolen, the password cannot deduced from the hash. The salt prevents rainbow-tables attacks. Directories are protected using .htaccess files Forms are protected against XSRF : Forms which act on data (save,delete\u2026) contain a token generated by the server. Any posted form which does not contain a valid token is rejected. Any token can only be used once. Tokens are attached to the session and cannot be reused in another session. Sessions automatically expire after 60 minutes. Sessions are protected against hijacking: the session ID cannot be used from a different IP address. Links are stored as an associative array which is serialized, compressed (with deflate), base64-encoded and saved as a comment in a .php file - even if the server does not support .htaccess files, the data file will still not be readable by URL. Bruteforce protection: Successful and failed login attempts are logged - IP bans are enforced after a configurable amount of failures. Logs can also be used consumed by fail2ban A pop-up notification is shown when a new release is available.","title":"Security"},{"location":"dev/Development/#link-structure","text":"Every link available through the LinkDB object is represented as an array containing the following fields: id (integer): Unique identifier. title (string): Title of the link. url (string): URL of the link. Used for displayable links (without redirector, url encoding, etc.). Can be absolute or relative for Notes. real_url (string): Real destination URL, can be redirected, encoded, etc. shorturl (string): Permalink small hash. description (string): Link text description. private (boolean): whether the link is private or not. tags (string): all link tags separated by a single space thumbnail (string|boolean): relative path of the thumbnail cache file, or false if there isn't any. created (DateTime): link creation date time. updated (DateTime): last modification date time. Small hashes are used to make a link to an entry in Shaarli. They are unique: the date of the item (eg. 20110923_150523 ) is hashed with CRC32, then converted to base64 and some characters are replaced. They are always 6 characters longs and use only A-Z a-z 0-9 - _ and @ .","title":"Link structure"},{"location":"dev/Development/#directory-structure","text":"Here is the directory structure of Shaarli and the purpose of the different files: index.php # Main program application/ # Shaarli classes \u251c\u2500\u2500 LinkDB.php ... \u2514\u2500\u2500 Utils.php tests/ # Shaarli unitary & functional tests \u251c\u2500\u2500 LinkDBTest.php ... \u251c\u2500\u2500 utils # utilities to ease testing \u2502 \u2514\u2500\u2500 ReferenceLinkDB.php \u2514\u2500\u2500 UtilsTest.php assets/ \u251c\u2500\u2500 common/ # Assets shared by multiple themes \u251c\u2500\u2500 ... \u251c\u2500\u2500 default/ # Assets for the default template, before compilation \u251c\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 img/ # Images used by the default theme \u251c\u2500\u2500 js/ # JavaScript files in ES6 syntax \u251c\u2500\u2500 scss/ # SASS files \u2514\u2500\u2500 vintage/ # Assets for the vintage template, before compilation \u2514\u2500\u2500 ... COPYING # Shaarli license inc/ # static assets and 3rd party libraries \u2514\u2500\u2500 rain.tpl.class.php # RainTPL templating library images/ # Images and icons used in Shaarli data/ # data storage: bookmark database, configuration, logs, banlist... \u251c\u2500\u2500 config.json.php # Shaarli configuration (login, password, timezone, title...) \u251c\u2500\u2500 datastore.php # Your link database (compressed). \u251c\u2500\u2500 ipban.php # IP address ban system data \u251c\u2500\u2500 lastupdatecheck.txt # Update check timestamp file \u2514\u2500\u2500 log.txt # login/IPban log. tpl/ # RainTPL templates for Shaarli. They are used to build the pages. \u251c\u2500\u2500 default/ # Default Shaarli theme \u251c\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 img/ # Images \u251c\u2500\u2500 js/ # JavaScript files compiled by Babel and compatible with all browsers \u251c\u2500\u2500 css/ # CSS files compiled with SASS \u2514\u2500\u2500 vintage/ # Legacy Shaarli theme \u2514\u2500\u2500 ... cache/ # thumbnails cache # This directory is automatically created. You can erase it anytime you want. tmp/ # Temporary directory for compiled RainTPL templates. # This directory is automatically created. You can erase it anytime you want. vendor/ # Third-party dependencies. This directory is created by Composer Shaarli needs read access to: the root index.php file the application/ , plugins/ and inc/ directories (recursively) Shaarli needs read/write access to the cache/ , data/ , pagecache/ , and tmp/ directories","title":"Directory structure"},{"location":"dev/Development/#automation","text":"A Makefile is available to perform project-related operations: Static analysis - check that the code is compliant to PHP conventions Unit tests - ensure there are no regressions introduced by new commits Documentation - generate a local HTML copy of the markdown documentation","title":"Automation"},{"location":"dev/Development/#continuous-integration","text":"Github Actions is a Continuous Integration build server, that runs a build: each time a commit is pushed to any branch each time a Pull Request is submitted or updated After all jobs have finished, Github Actions returns the results to GitHub: a status icon represents the result for the master branch: Pull Requests are updated with the Github Actions build result. Github Actions is also used to build and push Docker images to https://github.com/shaarli/Shaarli/pkgs/container/shaarli for the master branch and on every git tag / release . See .github/workflows/ .","title":"Continuous Integration"},{"location":"dev/Development/#documentation","text":"mkdocs is used to convert markdown documentation to HTML pages. The public documentation website is rendered and hosted by readthedocs.org . A copy of the documentation is also included in prebuilt release archives ( doc/html/ path in your Shaarli installation). To generate the HTML documentation locally, install a recent version of Python setuptools and run make doc .","title":"Documentation"},{"location":"dev/Development/#static-analysis","text":"Patches should try to stick to the PHP Standard Recommendations (PSR), and must follow: PSR-1 - Basic Coding Standard PSR-2 - Coding Style Guide PSR-12 - Extended Coding Style Guide These are enforced on pull requests using our Continuous Integration tools with PHP Code Sniffer . Static analysis tools are installed with Composer dependencies, and used through Shaarli's Makefile with make code_sniffer . For an overview of the available features, see: Code quality: Makefile to run static code checkers (#124) Apply PHP Code Sniffer to Shaarli code base (#1635)","title":"Static analysis"},{"location":"dev/GnuPG-signature/","text":"Introduction # PGP and GPG # Gnu Privacy Guard (GnuPG) is an Open Source implementation of the Pretty Good Privacy (OpenPGP) specification. Its main purposes are digital authentication, signature and encryption. It is often used by the FLOSS community to verify: Linux package signatures: Debian SecureApt , ArchLinux Master Keys Version control releases & maintainer identity You MUST understand that presence of data in the keyserver (pools) in no way connotes trust. Anyone can generate a key, with any name or email address, and upload it. All security and trust comes from evaluating security at the \u201cobject level\u201d, via PGP Web of trust signatures. This keyserver makes it possible to retrieve keys, looking them up via various indices, but the collection of keys in this public pool is KNOWN to contain malicious and fraudulent keys. It is the common expectation of server operators that users understand this and use software which, like all known common OpenPGP implementations, evaluates trust accordingly. This expectation is so common that it is not normally explicitly stated. -- Phil Pennock (author of the SKS key server - http://sks.spodhuis.org/) Trust can be gained by having your key signed by other people (and signing their key back, too :) ), for instance during key signing parties : Keysigning party HOWTO , Generate a GPG key # Generating a GPG key for Git tagging (StackOverflow) Generating a GPG key (GitHub) gpg - provide identity information # $ gpg --gen-key gpg (GnuPG) 2.1.6; Copyright (C) 2015 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Note: Use \"gpg2 --full-gen-key\" for a full featured key generation dialog. GnuPG needs to construct a user ID to identify your key. Real name: Marvin the Paranoid Android Email address: marvin@h2g2.net You selected this USER-ID: \"Marvin the Paranoid Android <marvin@h2g2.net>\" Change (N)ame, (E)mail, or (O)kay/(Q)uit? o We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg - entropy interlude # At this point, you will: - be prompted for a secure password to protect your key (the input method will depend on your Desktop Environment and configuration) - be asked to use your machine's input devices (mouse, keyboard, etc.) to generate random entropy; this step may take some time gpg - key creation confirmation # gpg: key A9D53A3E marked as ultimately trusted public and secret key created and signed. gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 2 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 2u pub rsa2048/A9D53A3E 2015-07-31 Key fingerprint = AF2A 5381 E54B 2FD2 14C4 A9A3 0E35 ACA4 A9D5 3A3E uid [ultimate] Marvin the Paranoid Android <marvin@h2g2.net> sub rsa2048/8C0EACF1 2015-07-31 gpg - submit your public key to a PGP server (Optional) # $ gpg --keyserver pgp.mit.edu --send-keys A9D53A3E gpg: sending key A9D53A3E to hkp server pgp.mit.edu Create and push a GPG-signed tag # See Release Shaarli .","title":"GnuPG signature"},{"location":"dev/GnuPG-signature/#introduction","text":"","title":"Introduction"},{"location":"dev/GnuPG-signature/#pgp-and-gpg","text":"Gnu Privacy Guard (GnuPG) is an Open Source implementation of the Pretty Good Privacy (OpenPGP) specification. Its main purposes are digital authentication, signature and encryption. It is often used by the FLOSS community to verify: Linux package signatures: Debian SecureApt , ArchLinux Master Keys Version control releases & maintainer identity You MUST understand that presence of data in the keyserver (pools) in no way connotes trust. Anyone can generate a key, with any name or email address, and upload it. All security and trust comes from evaluating security at the \u201cobject level\u201d, via PGP Web of trust signatures. This keyserver makes it possible to retrieve keys, looking them up via various indices, but the collection of keys in this public pool is KNOWN to contain malicious and fraudulent keys. It is the common expectation of server operators that users understand this and use software which, like all known common OpenPGP implementations, evaluates trust accordingly. This expectation is so common that it is not normally explicitly stated. -- Phil Pennock (author of the SKS key server - http://sks.spodhuis.org/) Trust can be gained by having your key signed by other people (and signing their key back, too :) ), for instance during key signing parties : Keysigning party HOWTO ,","title":"PGP and GPG"},{"location":"dev/GnuPG-signature/#generate-a-gpg-key","text":"Generating a GPG key for Git tagging (StackOverflow) Generating a GPG key (GitHub)","title":"Generate a GPG key"},{"location":"dev/GnuPG-signature/#gpg-provide-identity-information","text":"$ gpg --gen-key gpg (GnuPG) 2.1.6; Copyright (C) 2015 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Note: Use \"gpg2 --full-gen-key\" for a full featured key generation dialog. GnuPG needs to construct a user ID to identify your key. Real name: Marvin the Paranoid Android Email address: marvin@h2g2.net You selected this USER-ID: \"Marvin the Paranoid Android <marvin@h2g2.net>\" Change (N)ame, (E)mail, or (O)kay/(Q)uit? o We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy.","title":"gpg - provide identity information"},{"location":"dev/GnuPG-signature/#gpg-entropy-interlude","text":"At this point, you will: - be prompted for a secure password to protect your key (the input method will depend on your Desktop Environment and configuration) - be asked to use your machine's input devices (mouse, keyboard, etc.) to generate random entropy; this step may take some time","title":"gpg - entropy interlude"},{"location":"dev/GnuPG-signature/#gpg-key-creation-confirmation","text":"gpg: key A9D53A3E marked as ultimately trusted public and secret key created and signed. gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 2 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 2u pub rsa2048/A9D53A3E 2015-07-31 Key fingerprint = AF2A 5381 E54B 2FD2 14C4 A9A3 0E35 ACA4 A9D5 3A3E uid [ultimate] Marvin the Paranoid Android <marvin@h2g2.net> sub rsa2048/8C0EACF1 2015-07-31","title":"gpg - key creation confirmation"},{"location":"dev/GnuPG-signature/#gpg-submit-your-public-key-to-a-pgp-server-optional","text":"$ gpg --keyserver pgp.mit.edu --send-keys A9D53A3E gpg: sending key A9D53A3E to hkp server pgp.mit.edu","title":"gpg - submit your public key to a PGP server (Optional)"},{"location":"dev/GnuPG-signature/#create-and-push-a-gpg-signed-tag","text":"See Release Shaarli .","title":"Create and push a GPG-signed tag"},{"location":"dev/Plugin-system/","text":"Plugin system # Developer API # What can I do with plugins? # The plugin system lets you: insert content into specific places across templates. alter data before templates rendering. alter data before saving new links. How can I create a plugin for Shaarli? # First, chose a plugin name, such as demo_plugin . Under plugin folder, create a folder named with your plugin name. Then create a .meta file and a .php file in that folder. You should have the following tree view: | index.php | plugins/ |---| demo_plugin/ | |---| demo_plugin.meta | |---| demo_plugin.php Plugin initialization # At the beginning of Shaarli execution, all enabled plugins are loaded. At this point, the plugin system looks for an init() function in the .php to execute and run it if it exists. This function must be named this way, and takes the ConfigManager as parameter. <plugin_name>_init($conf) This function can be used to create initial data, load default settings, etc. But also to set plugin errors . If the initialization function returns an array of strings, they will be understand as errors, and displayed in the header to logged in users. The plugin system also looks for a description variable in the .meta file, to be displayed in the plugin administration page. description=\"The plugin does this and that.\" Understanding hooks # A plugin is a set of functions. Each function will be triggered by the plugin system at certain point in Shaarli execution. These functions need to be named with this pattern: hook_<plugin_name>_<hook_name>($data, $conf) Parameters: data: see $data section conf: the ConfigManager instance. For example, if my plugin want to add data to the header, this function is needed: hook_demo_plugin_render_header If this function is declared, and the plugin enabled, it will be called every time Shaarli is rendering the header. Plugin's data # Parameters # Every hook function has a $data parameter. Its content differs for each hooks. This parameter needs to be returned every time , otherwise data is lost. return $data; Special data # Special additional data are passed to every hook through the $data parameter to give you access to additional context, and services. Complete list: _PAGE_ (string): if the current hook is used to render a template, its name is passed through this additional parameter. _LOGGEDIN_ (bool): whether the user is logged in or not. _BASE_PATH_ (string): if Shaarli instance is hosted under a subfolder, contains the subfolder path to index.php (e.g. https://domain.tld/shaarli/ -> /shaarli/ ). _BOOKMARK_SERVICE_ ( BookmarkServiceInterface ): bookmark service instance, for advanced usage. Example: if ($data['_PAGE_'] === TemplatePage::LINKLIST && $data['LOGGEDIN'] === true) { // Do something for logged in users when the link list is rendered } Filling templates placeholder # Template placeholders are displayed in template in specific places. RainTPL displays every element contained in the placeholder's array. These element can be added by plugins. For example, let's add a value in the placeholder top_placeholder which is displayed at the top of my page: $data['top_placeholder'][] = 'My content'; # OR array_push($data['top_placeholder'], 'My', 'content'); return $data; Data manipulation # When a page is displayed, every variable send to the template engine is passed to plugins before that in $data . The data contained by this array can be altered before template rendering. For example, in linklist, it is possible to alter every title: // mind the reference if you want $data to be altered foreach ($data['links'] as &$value) { // String reverse every title. $value['title'] = strrev($value['title']); } return $data; Metadata # Every plugin needs a <plugin_name>.meta file, which is in fact an .ini file ( KEY=\"VALUE\" ), to be listed in plugin administration. Each file contain two keys: description : plugin description parameters : user parameter names, separated by a ; . parameter.<PARAMETER_NAME> : add a text description the specified parameter. Note: In PHP, parse_ini_file() seems to want strings to be between by quotes \" in the ini file. Register plugin's routes # Shaarli lets you register custom Slim routes for your plugin. To register a route, the plugin must include a function called function <plugin_name>_register_routes(): array . This method must return an array of routes, each entry must contain the following keys: method : HTTP method, GET/POST/PUT/PATCH/DELETE route (path): without prefix, e.g. /up/{variable} It will be later prefixed by /plugin/<plugin name>/ . callable string, function name or FQN class's method to execute, e.g. demo_plugin_custom_controller . Callable functions or methods must have Slim\\Http\\Request and Slim\\Http\\Response parameters and return a Slim\\Http\\Response . We recommend creating a dedicated class and extend either ShaarliVisitorController or ShaarliAdminController to use helper functions they provide. A dedicated plugin template is available for rendering content: pluginscontent.html using content placeholder. Warning : plugins are not able to use RainTPL template engine for their content due to technical restrictions. RainTPL does not allow to register multiple template folders, so all HTML rendering must be done within plugin custom controller. Check out the demo_plugin for a live example: GET <shaarli_url>/plugin/demo_plugin/custom . Understanding relative paths # Because Shaarli is a self-hosted tool, an instance can either be installed at the root directory, or under a subfolder. This means that you can never use absolute paths (eg /plugins/mything/file.png ). If a file needs to be included in server end, use simple relative path: PluginManager::$PLUGINS_PATH . '/mything/template.html' . If it needs to be included in front end side (e.g. an image), the relative path must be prefixed with special data: if it's a link that will need to be processed by Shaarli, use _BASE_PATH_ : for e.g. $data['_BASE_PATH_'] . '/admin/tools . if you want to include an asset, you need to add the root URL (base path without /index.php , for people using Shaarli without URL rewriting), then use _ROOT_PATH_ : for e.g $['_ROOT_PATH_'] . '/' . PluginManager::$PLUGINS_PATH . '/mything/picture.png . Note that special placeholders for CSS and JS files (respectively css_files and js_files ) are already prefixed with the root path in template files. It's not working! # Use demo_plugin as a functional example. It covers most of the plugin system features. If it's still not working, please open an issue . Hooks # Hooks Description render_header Allow plugin to add content in page headers. render_includes Allow plugin to include their own CSS files. render_footer Allow plugin to add content in page footer and include their own JS files. render_linklist It allows to add content at the begining and end of the page, after every link displayed and to alter link data. render_editlink Allow to add fields in the form, or display elements. render_tools Allow to add content at the end of the page. render_picwall Allow to add content at the top and bottom of the page. render_tagcloud Allow to add content at the top and bottom of the page, and after all tags. render_taglist Allow to add content at the top and bottom of the page, and after all tags. render_daily Allow to add content at the top and bottom of the page, the bottom of each link and to alter data. render_feed Allow to do add tags in RSS and ATOM feeds. save_link Allow to alter the link being saved in the datastore. delete_link Allow to do an action before a link is deleted from the datastore. save_plugin_parameters Allow to manipulate plugin parameters before they're saved. filter_search_entry Add custom filters to Shaarli search engine render_header # Triggered on every page - allows plugins to add content in page headers. Data # $data is an array containing: Special data Template placeholders # Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: buttons_toolbar : after the list of buttons in the header. fields_toolbar : after search fields in the header. Note: This will only be called in linklist. render_includes # Triggered on every page - allows plugins to include their own CSS files. data # $data is an array containing: Special data Template placeholders # Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: css_files : called after loading default CSS. Note: only add the path of the CSS file. E.g: plugins/demo_plugin/custom_demo.css . render_footer # Triggered on every page. Allow plugin to add content in page footer and include their own JS files. data # $data is an array containing: Special data Template placeholders # Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: text : called after the end of the footer text. endofpage : called at the end of the page. js_files : called at the end of the page, to include custom JS scripts. Note: only add the path of the JS file. E.g: plugins/demo_plugin/custom_demo.js . render_linklist # Triggered when linklist is displayed (list of links, permalink, search, tag filtered, etc.). It allows to add content at the begining and end of the page, after every link displayed and to alter link data. data # $data is an array containing: All templates data, including links. Special data template placeholders # Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: action_plugin : next to the button \"private only\" at the top and bottom of the page. link_plugin : for every link, between permalink and link URL. plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. render_editlink # Triggered when the link edition form is displayed. Allow to add fields in the form, or display elements. data # $data is an array containing: All templates data. Special data template placeholders # Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: edit_link_plugin : after tags field. render_tools # Triggered when the \"tools\" page is displayed. Allow to add content at the end of the page. data # $data is an array containing: All templates data. Special data template placeholders # Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: tools_plugin : at the end of the page. render_picwall # Triggered when picwall is displayed. Allow to add content at the top and bottom of the page. data # $data is an array containing: All templates data. Special data template placeholders # Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. render_tagcloud # Triggered when tagcloud is displayed. Allow to add content at the top and bottom of the page. data # $data is an array containing: All templates data. Special data Template placeholders # Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. For each tag, the following placeholder can be used: tag_plugin : after each tag render_taglist # Triggered when taglist is displayed - allows to add content at the top and bottom of the page. data # $data is an array containing: All templates data. Special data Template placeholders # Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. For each tag, the following placeholder can be used: tag_plugin : after each tag render_daily # Triggered when tagcloud is displayed. Allow to add content at the top and bottom of the page, the bottom of each link and to alter data. data # $data is an array containing: All templates data, including links. Special data Template placeholders # Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: link_plugin : used at bottom of each link. plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. render_feed # Triggered when the ATOM or RSS feed is displayed. Allow to add tags in the feed, either in the header or for each items. Items (links) can also be altered before being rendered. data # $data is an array containing: All templates data, including links. Special data Template placeholders # Tags can be added in feeds by adding an entry in $data['<placeholder>'] array. List of placeholders: feed_plugins_header : used as a header tag in the feed. For each links: feed_plugins : additional tag for every link entry. save_link # Triggered when a link is save (new link or edit). Allow to alter the link being saved in the datastore. data # $data is an array containing the link being saved: id title url shorturl description private tags created updated Also special data . delete_link # Triggered when a link is deleted. Allow to execute any action before the link is actually removed from the datastore data # $data is an array containing the link being deleted: id title url shorturl description private tags created updated Also special data . save_plugin_parameters # Triggered when the plugin parameters are saved from the plugin administration page. Plugins can perform an action every times their settings are updated. For example it is used to update the CSS file of the default_colors plugins. data # $data input contains the $_POST array. So if the plugin has a parameter called MYPLUGIN_PARAMETER , the array will contain an entry with MYPLUGIN_PARAMETER as a key. Also special data . filter_search_entry # Triggered for every bookmark when Shaarli's BookmarkService method search() is used. Any custom filter can be added to filter out bookmarks from search results. The hook must return either: - true to keep bookmark entry in search result set - false to discard bookmark entry in result set Note: custom filters are called before default filters are applied. Parameters # Shaarli\\Bookmark\\Bookmark object: entry to evaluate $context array : additional information provided depending on what search is currently used, the user request, etc. Guide for template designers # Plugin administration # Your theme must include a plugin administration page: pluginsadmin.html . Note: repo's template link needs to be added when the PR is merged. Use the default one as an example. Aside from classic RainTPL loops, plugins order is handle by JavaScript. You can just include plugin_admin.js , only if: you're using a table. you call orderUp() and orderUp() onclick on arrows. you add data-line and data-order to your rows. Otherwise, you can use your own JS as long as this field is send by the form: Placeholder system # In order to make plugins work with every custom themes, you need to add variable placeholder in your templates. It's a RainTPL loop like this: {loop=\"$plugin_variable\"} {$value} {/loop} You should enable demo_plugin for testing purpose, since it uses every placeholder available. List of placeholders # page.header.html At the end of the menu: {loop=\"$plugins_header.buttons_toolbar\"} {$value} {/loop} At the end of file, before clearing floating blocks: {if=\"!empty($plugin_errors) && $is_logged_in\"} <ul class=\"errors\"> {loop=\"plugin_errors\"} <li>{$value}</li> {/loop} </ul> {/if} includes.html At the end of the file: {loop=\"$plugins_includes.css_files\"} <link type=\"text/css\" rel=\"stylesheet\" href=\"{$value}#\"/> {/loop} page.footer.html At the end of your footer notes: {loop=\"$plugins_footer.text\"} {$value} {/loop} At the end of file: {loop=\"$plugins_footer.js_files\"} <script src=\"{$value}#\"></script> {/loop} linklist.html After search fields: {loop=\"$plugins_header.fields_toolbar\"} {$value} {/loop} Before displaying the link list (after paging): {loop=\"$plugin_start_zone\"} {$value} {/loop} For every links (icons): {loop=\"$value.link_plugin\"} <span>{$value}</span> {/loop} Before end paging: {loop=\"$plugin_end_zone\"} {$value} {/loop} linklist.paging.html After the \"private only\" icon: {loop=\"$action_plugin\"} {$value} {/loop} editlink.html After tags field: {loop=\"$edit_link_plugin\"} {$value} {/loop} tools.html After the last tool: {loop=\"$tools_plugin\"} {$value} {/loop} picwall.html Top: <div id=\"plugin_zone_start_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> tagcloud.html Top: <div id=\"plugin_zone_start_tagcloud\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_tagcloud\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> daily.html Top: <div id=\"plugin_zone_start_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> After every link: <div class=\"dailyEntryFooter\"> {loop=\"$link.link_plugin\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> feed.atom.xml and feed.rss.xml : In headers tags section: {loop=\"$feed_plugins_header\"} {$value} {/loop} After each entry: {loop=\"$value.feed_plugins\"} {$value} {/loop}","title":"Plugin System"},{"location":"dev/Plugin-system/#plugin-system","text":"","title":"Plugin system"},{"location":"dev/Plugin-system/#developer-api","text":"","title":"Developer API"},{"location":"dev/Plugin-system/#what-can-i-do-with-plugins","text":"The plugin system lets you: insert content into specific places across templates. alter data before templates rendering. alter data before saving new links.","title":"What can I do with plugins?"},{"location":"dev/Plugin-system/#how-can-i-create-a-plugin-for-shaarli","text":"First, chose a plugin name, such as demo_plugin . Under plugin folder, create a folder named with your plugin name. Then create a .meta file and a .php file in that folder. You should have the following tree view: | index.php | plugins/ |---| demo_plugin/ | |---| demo_plugin.meta | |---| demo_plugin.php","title":"How can I create a plugin for Shaarli?"},{"location":"dev/Plugin-system/#plugin-initialization","text":"At the beginning of Shaarli execution, all enabled plugins are loaded. At this point, the plugin system looks for an init() function in the .php to execute and run it if it exists. This function must be named this way, and takes the ConfigManager as parameter. <plugin_name>_init($conf) This function can be used to create initial data, load default settings, etc. But also to set plugin errors . If the initialization function returns an array of strings, they will be understand as errors, and displayed in the header to logged in users. The plugin system also looks for a description variable in the .meta file, to be displayed in the plugin administration page. description=\"The plugin does this and that.\"","title":"Plugin initialization"},{"location":"dev/Plugin-system/#understanding-hooks","text":"A plugin is a set of functions. Each function will be triggered by the plugin system at certain point in Shaarli execution. These functions need to be named with this pattern: hook_<plugin_name>_<hook_name>($data, $conf) Parameters: data: see $data section conf: the ConfigManager instance. For example, if my plugin want to add data to the header, this function is needed: hook_demo_plugin_render_header If this function is declared, and the plugin enabled, it will be called every time Shaarli is rendering the header.","title":"Understanding hooks"},{"location":"dev/Plugin-system/#plugins-data","text":"","title":"Plugin's data"},{"location":"dev/Plugin-system/#parameters","text":"Every hook function has a $data parameter. Its content differs for each hooks. This parameter needs to be returned every time , otherwise data is lost. return $data;","title":"Parameters"},{"location":"dev/Plugin-system/#special-data","text":"Special additional data are passed to every hook through the $data parameter to give you access to additional context, and services. Complete list: _PAGE_ (string): if the current hook is used to render a template, its name is passed through this additional parameter. _LOGGEDIN_ (bool): whether the user is logged in or not. _BASE_PATH_ (string): if Shaarli instance is hosted under a subfolder, contains the subfolder path to index.php (e.g. https://domain.tld/shaarli/ -> /shaarli/ ). _BOOKMARK_SERVICE_ ( BookmarkServiceInterface ): bookmark service instance, for advanced usage. Example: if ($data['_PAGE_'] === TemplatePage::LINKLIST && $data['LOGGEDIN'] === true) { // Do something for logged in users when the link list is rendered }","title":"Special data"},{"location":"dev/Plugin-system/#filling-templates-placeholder","text":"Template placeholders are displayed in template in specific places. RainTPL displays every element contained in the placeholder's array. These element can be added by plugins. For example, let's add a value in the placeholder top_placeholder which is displayed at the top of my page: $data['top_placeholder'][] = 'My content'; # OR array_push($data['top_placeholder'], 'My', 'content'); return $data;","title":"Filling templates placeholder"},{"location":"dev/Plugin-system/#data-manipulation","text":"When a page is displayed, every variable send to the template engine is passed to plugins before that in $data . The data contained by this array can be altered before template rendering. For example, in linklist, it is possible to alter every title: // mind the reference if you want $data to be altered foreach ($data['links'] as &$value) { // String reverse every title. $value['title'] = strrev($value['title']); } return $data;","title":"Data manipulation"},{"location":"dev/Plugin-system/#metadata","text":"Every plugin needs a <plugin_name>.meta file, which is in fact an .ini file ( KEY=\"VALUE\" ), to be listed in plugin administration. Each file contain two keys: description : plugin description parameters : user parameter names, separated by a ; . parameter.<PARAMETER_NAME> : add a text description the specified parameter. Note: In PHP, parse_ini_file() seems to want strings to be between by quotes \" in the ini file.","title":"Metadata"},{"location":"dev/Plugin-system/#register-plugins-routes","text":"Shaarli lets you register custom Slim routes for your plugin. To register a route, the plugin must include a function called function <plugin_name>_register_routes(): array . This method must return an array of routes, each entry must contain the following keys: method : HTTP method, GET/POST/PUT/PATCH/DELETE route (path): without prefix, e.g. /up/{variable} It will be later prefixed by /plugin/<plugin name>/ . callable string, function name or FQN class's method to execute, e.g. demo_plugin_custom_controller . Callable functions or methods must have Slim\\Http\\Request and Slim\\Http\\Response parameters and return a Slim\\Http\\Response . We recommend creating a dedicated class and extend either ShaarliVisitorController or ShaarliAdminController to use helper functions they provide. A dedicated plugin template is available for rendering content: pluginscontent.html using content placeholder. Warning : plugins are not able to use RainTPL template engine for their content due to technical restrictions. RainTPL does not allow to register multiple template folders, so all HTML rendering must be done within plugin custom controller. Check out the demo_plugin for a live example: GET <shaarli_url>/plugin/demo_plugin/custom .","title":"Register plugin's routes"},{"location":"dev/Plugin-system/#understanding-relative-paths","text":"Because Shaarli is a self-hosted tool, an instance can either be installed at the root directory, or under a subfolder. This means that you can never use absolute paths (eg /plugins/mything/file.png ). If a file needs to be included in server end, use simple relative path: PluginManager::$PLUGINS_PATH . '/mything/template.html' . If it needs to be included in front end side (e.g. an image), the relative path must be prefixed with special data: if it's a link that will need to be processed by Shaarli, use _BASE_PATH_ : for e.g. $data['_BASE_PATH_'] . '/admin/tools . if you want to include an asset, you need to add the root URL (base path without /index.php , for people using Shaarli without URL rewriting), then use _ROOT_PATH_ : for e.g $['_ROOT_PATH_'] . '/' . PluginManager::$PLUGINS_PATH . '/mything/picture.png . Note that special placeholders for CSS and JS files (respectively css_files and js_files ) are already prefixed with the root path in template files.","title":"Understanding relative paths"},{"location":"dev/Plugin-system/#its-not-working","text":"Use demo_plugin as a functional example. It covers most of the plugin system features. If it's still not working, please open an issue .","title":"It's not working!"},{"location":"dev/Plugin-system/#hooks","text":"Hooks Description render_header Allow plugin to add content in page headers. render_includes Allow plugin to include their own CSS files. render_footer Allow plugin to add content in page footer and include their own JS files. render_linklist It allows to add content at the begining and end of the page, after every link displayed and to alter link data. render_editlink Allow to add fields in the form, or display elements. render_tools Allow to add content at the end of the page. render_picwall Allow to add content at the top and bottom of the page. render_tagcloud Allow to add content at the top and bottom of the page, and after all tags. render_taglist Allow to add content at the top and bottom of the page, and after all tags. render_daily Allow to add content at the top and bottom of the page, the bottom of each link and to alter data. render_feed Allow to do add tags in RSS and ATOM feeds. save_link Allow to alter the link being saved in the datastore. delete_link Allow to do an action before a link is deleted from the datastore. save_plugin_parameters Allow to manipulate plugin parameters before they're saved. filter_search_entry Add custom filters to Shaarli search engine","title":"Hooks"},{"location":"dev/Plugin-system/#render_header","text":"Triggered on every page - allows plugins to add content in page headers.","title":"render_header"},{"location":"dev/Plugin-system/#data","text":"$data is an array containing: Special data","title":"Data"},{"location":"dev/Plugin-system/#template-placeholders","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: buttons_toolbar : after the list of buttons in the header. fields_toolbar : after search fields in the header. Note: This will only be called in linklist.","title":"Template placeholders"},{"location":"dev/Plugin-system/#render_includes","text":"Triggered on every page - allows plugins to include their own CSS files.","title":"render_includes"},{"location":"dev/Plugin-system/#data_1","text":"$data is an array containing: Special data","title":"data"},{"location":"dev/Plugin-system/#template-placeholders_1","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: css_files : called after loading default CSS. Note: only add the path of the CSS file. E.g: plugins/demo_plugin/custom_demo.css .","title":"Template placeholders"},{"location":"dev/Plugin-system/#render_footer","text":"Triggered on every page. Allow plugin to add content in page footer and include their own JS files.","title":"render_footer"},{"location":"dev/Plugin-system/#data_2","text":"$data is an array containing: Special data","title":"data"},{"location":"dev/Plugin-system/#template-placeholders_2","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: text : called after the end of the footer text. endofpage : called at the end of the page. js_files : called at the end of the page, to include custom JS scripts. Note: only add the path of the JS file. E.g: plugins/demo_plugin/custom_demo.js .","title":"Template placeholders"},{"location":"dev/Plugin-system/#render_linklist","text":"Triggered when linklist is displayed (list of links, permalink, search, tag filtered, etc.). It allows to add content at the begining and end of the page, after every link displayed and to alter link data.","title":"render_linklist"},{"location":"dev/Plugin-system/#data_3","text":"$data is an array containing: All templates data, including links. Special data","title":"data"},{"location":"dev/Plugin-system/#template-placeholders_3","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: action_plugin : next to the button \"private only\" at the top and bottom of the page. link_plugin : for every link, between permalink and link URL. plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content.","title":"template placeholders"},{"location":"dev/Plugin-system/#render_editlink","text":"Triggered when the link edition form is displayed. Allow to add fields in the form, or display elements.","title":"render_editlink"},{"location":"dev/Plugin-system/#data_4","text":"$data is an array containing: All templates data. Special data","title":"data"},{"location":"dev/Plugin-system/#template-placeholders_4","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: edit_link_plugin : after tags field.","title":"template placeholders"},{"location":"dev/Plugin-system/#render_tools","text":"Triggered when the \"tools\" page is displayed. Allow to add content at the end of the page.","title":"render_tools"},{"location":"dev/Plugin-system/#data_5","text":"$data is an array containing: All templates data. Special data","title":"data"},{"location":"dev/Plugin-system/#template-placeholders_5","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: tools_plugin : at the end of the page.","title":"template placeholders"},{"location":"dev/Plugin-system/#render_picwall","text":"Triggered when picwall is displayed. Allow to add content at the top and bottom of the page.","title":"render_picwall"},{"location":"dev/Plugin-system/#data_6","text":"$data is an array containing: All templates data. Special data","title":"data"},{"location":"dev/Plugin-system/#template-placeholders_6","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content.","title":"template placeholders"},{"location":"dev/Plugin-system/#render_tagcloud","text":"Triggered when tagcloud is displayed. Allow to add content at the top and bottom of the page.","title":"render_tagcloud"},{"location":"dev/Plugin-system/#data_7","text":"$data is an array containing: All templates data. Special data","title":"data"},{"location":"dev/Plugin-system/#template-placeholders_7","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. For each tag, the following placeholder can be used: tag_plugin : after each tag","title":"Template placeholders"},{"location":"dev/Plugin-system/#render_taglist","text":"Triggered when taglist is displayed - allows to add content at the top and bottom of the page.","title":"render_taglist"},{"location":"dev/Plugin-system/#data_8","text":"$data is an array containing: All templates data. Special data","title":"data"},{"location":"dev/Plugin-system/#template-placeholders_8","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. For each tag, the following placeholder can be used: tag_plugin : after each tag","title":"Template placeholders"},{"location":"dev/Plugin-system/#render_daily","text":"Triggered when tagcloud is displayed. Allow to add content at the top and bottom of the page, the bottom of each link and to alter data.","title":"render_daily"},{"location":"dev/Plugin-system/#data_9","text":"$data is an array containing: All templates data, including links. Special data","title":"data"},{"location":"dev/Plugin-system/#template-placeholders_9","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: link_plugin : used at bottom of each link. plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content.","title":"Template placeholders"},{"location":"dev/Plugin-system/#render_feed","text":"Triggered when the ATOM or RSS feed is displayed. Allow to add tags in the feed, either in the header or for each items. Items (links) can also be altered before being rendered.","title":"render_feed"},{"location":"dev/Plugin-system/#data_10","text":"$data is an array containing: All templates data, including links. Special data","title":"data"},{"location":"dev/Plugin-system/#template-placeholders_10","text":"Tags can be added in feeds by adding an entry in $data['<placeholder>'] array. List of placeholders: feed_plugins_header : used as a header tag in the feed. For each links: feed_plugins : additional tag for every link entry.","title":"Template placeholders"},{"location":"dev/Plugin-system/#save_link","text":"Triggered when a link is save (new link or edit). Allow to alter the link being saved in the datastore.","title":"save_link"},{"location":"dev/Plugin-system/#data_11","text":"$data is an array containing the link being saved: id title url shorturl description private tags created updated Also special data .","title":"data"},{"location":"dev/Plugin-system/#delete_link","text":"Triggered when a link is deleted. Allow to execute any action before the link is actually removed from the datastore","title":"delete_link"},{"location":"dev/Plugin-system/#data_12","text":"$data is an array containing the link being deleted: id title url shorturl description private tags created updated Also special data .","title":"data"},{"location":"dev/Plugin-system/#save_plugin_parameters","text":"Triggered when the plugin parameters are saved from the plugin administration page. Plugins can perform an action every times their settings are updated. For example it is used to update the CSS file of the default_colors plugins.","title":"save_plugin_parameters"},{"location":"dev/Plugin-system/#data_13","text":"$data input contains the $_POST array. So if the plugin has a parameter called MYPLUGIN_PARAMETER , the array will contain an entry with MYPLUGIN_PARAMETER as a key. Also special data .","title":"data"},{"location":"dev/Plugin-system/#filter_search_entry","text":"Triggered for every bookmark when Shaarli's BookmarkService method search() is used. Any custom filter can be added to filter out bookmarks from search results. The hook must return either: - true to keep bookmark entry in search result set - false to discard bookmark entry in result set Note: custom filters are called before default filters are applied.","title":"filter_search_entry"},{"location":"dev/Plugin-system/#parameters_1","text":"Shaarli\\Bookmark\\Bookmark object: entry to evaluate $context array : additional information provided depending on what search is currently used, the user request, etc.","title":"Parameters"},{"location":"dev/Plugin-system/#guide-for-template-designers","text":"","title":"Guide for template designers"},{"location":"dev/Plugin-system/#plugin-administration","text":"Your theme must include a plugin administration page: pluginsadmin.html . Note: repo's template link needs to be added when the PR is merged. Use the default one as an example. Aside from classic RainTPL loops, plugins order is handle by JavaScript. You can just include plugin_admin.js , only if: you're using a table. you call orderUp() and orderUp() onclick on arrows. you add data-line and data-order to your rows. Otherwise, you can use your own JS as long as this field is send by the form:","title":"Plugin administration"},{"location":"dev/Plugin-system/#placeholder-system","text":"In order to make plugins work with every custom themes, you need to add variable placeholder in your templates. It's a RainTPL loop like this: {loop=\"$plugin_variable\"} {$value} {/loop} You should enable demo_plugin for testing purpose, since it uses every placeholder available.","title":"Placeholder system"},{"location":"dev/Plugin-system/#list-of-placeholders","text":"page.header.html At the end of the menu: {loop=\"$plugins_header.buttons_toolbar\"} {$value} {/loop} At the end of file, before clearing floating blocks: {if=\"!empty($plugin_errors) && $is_logged_in\"} <ul class=\"errors\"> {loop=\"plugin_errors\"} <li>{$value}</li> {/loop} </ul> {/if} includes.html At the end of the file: {loop=\"$plugins_includes.css_files\"} <link type=\"text/css\" rel=\"stylesheet\" href=\"{$value}#\"/> {/loop} page.footer.html At the end of your footer notes: {loop=\"$plugins_footer.text\"} {$value} {/loop} At the end of file: {loop=\"$plugins_footer.js_files\"} <script src=\"{$value}#\"></script> {/loop} linklist.html After search fields: {loop=\"$plugins_header.fields_toolbar\"} {$value} {/loop} Before displaying the link list (after paging): {loop=\"$plugin_start_zone\"} {$value} {/loop} For every links (icons): {loop=\"$value.link_plugin\"} <span>{$value}</span> {/loop} Before end paging: {loop=\"$plugin_end_zone\"} {$value} {/loop} linklist.paging.html After the \"private only\" icon: {loop=\"$action_plugin\"} {$value} {/loop} editlink.html After tags field: {loop=\"$edit_link_plugin\"} {$value} {/loop} tools.html After the last tool: {loop=\"$tools_plugin\"} {$value} {/loop} picwall.html Top: <div id=\"plugin_zone_start_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> tagcloud.html Top: <div id=\"plugin_zone_start_tagcloud\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_tagcloud\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> daily.html Top: <div id=\"plugin_zone_start_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> After every link: <div class=\"dailyEntryFooter\"> {loop=\"$link.link_plugin\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> feed.atom.xml and feed.rss.xml : In headers tags section: {loop=\"$feed_plugins_header\"} {$value} {/loop} After each entry: {loop=\"$value.feed_plugins\"} {$value} {/loop}","title":"List of placeholders"},{"location":"dev/Release-Shaarli/","text":"Release Shaarli # Requirements # This guide assumes that you have: a GPG key matching your GitHub authentication credentials/email (the email address identified by the GPG key is the same as the one in your ~/.gitconfig ) a GitHub fork of Shaarli a local clone of your Shaarli fork, with the following remotes: origin pointing to your GitHub fork upstream pointing to the main Shaarli repository maintainer permissions on the main Shaarli repository, to: push the signed tag create a new release Composer needs to be installed The venv Python 3 module needs to be installed for HTML documentation generation. Release notes and CHANGELOG.md # GitHub allows drafting the release notes for the upcoming release, from the Releases page. This way, the release note can be drafted while contributions are merged to master . See http://keepachangelog.com/en/0.3.0/ for changelog formatting. CHANGELOG.md should contain the same information as the release note draft for the upcoming version. Update it to: add new entries (additions, fixes, etc.) mark the current version as released by setting its date and link add a new section for the future unreleased version ## [v0.x.y](https://github.com/shaarli/Shaarli/releases/tag/v0.x.y) - UNRELEASES ### Added ### Changed ### Fixed ### Removed ### Deprecated ### Security Update the list of Git contributors # $ make generate_authors $ git commit -s -m \"Update AUTHORS\" Create and merge a Pull Request # Create a Pull Request to marge changes from your remote, into master in the community Shaarli repository, and have it merged. Create the release branch and update shaarli_version.php # # fetch latest changes from master to your local copy git checkout master git pull upstream master # If releasing a new minor version, create a release branch $ git checkout -b v0.x # Otherwise just use the existing one $ git checkout v0.x # Get the latest changes $ git merge master # Check that everything went fine: $ make test # Bump shaarli_version.php from dev to 0.x.0, **without the v** $ vim shaarli_version.php $ git add shaarli_version $ git commit -s -m \"Bump Shaarli version to v0.x.0\" $ git push upstream v0.x Create and push a signed tag # Git tags are used to identify specific revisions with a unique version number that follows semantic versioning # update your local copy git checkout v0.5 git pull upstream v0.5 # create a signed tag git tag -s -m \"Release v0.5.0\" v0.5.0 # push the tag to upstream git push --tags upstream Here is how to verify a signed tag. v0.5.0 is the first GPG-signed tag pushed on the Community Shaarli. Let's have a look at its signature! # update the list of available tags git fetch upstream # get the SHA1 reference of the tag git show-ref tags/v0.5.0 # gives: f7762cf803f03f5caf4b8078359a63783d0090c1 refs/tags/v0.5.0 # verify the tag signature information git verify-tag f7762cf803f03f5caf4b8078359a63783d0090c1 # gpg: Signature made Thu 30 Jul 2015 11:46:34 CEST using RSA key ID 4100DF6F # gpg: Good signature from \"VirtualTam <virtualtam@flibidi.net>\" [ultimate] Publish the GitHub release # In the master banch, update version badges in README.md to point to the newly released Shaarli version Update the previously drafted release (notes, tag) and publish it Profit! Generate full release zip archives # Release archives will contain Shaarli code plus all required third-party libraries. They are useful for users who: have no SSH access, no possibility to install PHP packages/server extensions, no possibility to run scripts (shared hosting) do not want to install build/dev dependencies on their server git checkout the appropriate branch, then: # checkout the appropriate branch git checkout 0.x.y # generate zip archives make release_archive This will create shaarli-v0.x.y-full.tar , shaarli-v0.x.y-full.zip . These archives need to be manually uploaded on the previously created GitHub release . Update the latest branch # # checkout the 'latest' branch git checkout latest # merge changes from your newly published release branch git merge v0.x.y # fix eventual conflicts with git mergetool... # run tests make test # push the latest branch git push upstream latest","title":"Release Shaarli"},{"location":"dev/Release-Shaarli/#release-shaarli","text":"","title":"Release Shaarli"},{"location":"dev/Release-Shaarli/#requirements","text":"This guide assumes that you have: a GPG key matching your GitHub authentication credentials/email (the email address identified by the GPG key is the same as the one in your ~/.gitconfig ) a GitHub fork of Shaarli a local clone of your Shaarli fork, with the following remotes: origin pointing to your GitHub fork upstream pointing to the main Shaarli repository maintainer permissions on the main Shaarli repository, to: push the signed tag create a new release Composer needs to be installed The venv Python 3 module needs to be installed for HTML documentation generation.","title":"Requirements"},{"location":"dev/Release-Shaarli/#release-notes-and-changelogmd","text":"GitHub allows drafting the release notes for the upcoming release, from the Releases page. This way, the release note can be drafted while contributions are merged to master . See http://keepachangelog.com/en/0.3.0/ for changelog formatting. CHANGELOG.md should contain the same information as the release note draft for the upcoming version. Update it to: add new entries (additions, fixes, etc.) mark the current version as released by setting its date and link add a new section for the future unreleased version ## [v0.x.y](https://github.com/shaarli/Shaarli/releases/tag/v0.x.y) - UNRELEASES ### Added ### Changed ### Fixed ### Removed ### Deprecated ### Security","title":"Release notes and CHANGELOG.md"},{"location":"dev/Release-Shaarli/#update-the-list-of-git-contributors","text":"$ make generate_authors $ git commit -s -m \"Update AUTHORS\"","title":"Update the list of Git contributors"},{"location":"dev/Release-Shaarli/#create-and-merge-a-pull-request","text":"Create a Pull Request to marge changes from your remote, into master in the community Shaarli repository, and have it merged.","title":"Create and merge a Pull Request"},{"location":"dev/Release-Shaarli/#create-the-release-branch-and-update-shaarli_versionphp","text":"# fetch latest changes from master to your local copy git checkout master git pull upstream master # If releasing a new minor version, create a release branch $ git checkout -b v0.x # Otherwise just use the existing one $ git checkout v0.x # Get the latest changes $ git merge master # Check that everything went fine: $ make test # Bump shaarli_version.php from dev to 0.x.0, **without the v** $ vim shaarli_version.php $ git add shaarli_version $ git commit -s -m \"Bump Shaarli version to v0.x.0\" $ git push upstream v0.x","title":"Create the release branch and update shaarli_version.php"},{"location":"dev/Release-Shaarli/#create-and-push-a-signed-tag","text":"Git tags are used to identify specific revisions with a unique version number that follows semantic versioning # update your local copy git checkout v0.5 git pull upstream v0.5 # create a signed tag git tag -s -m \"Release v0.5.0\" v0.5.0 # push the tag to upstream git push --tags upstream Here is how to verify a signed tag. v0.5.0 is the first GPG-signed tag pushed on the Community Shaarli. Let's have a look at its signature! # update the list of available tags git fetch upstream # get the SHA1 reference of the tag git show-ref tags/v0.5.0 # gives: f7762cf803f03f5caf4b8078359a63783d0090c1 refs/tags/v0.5.0 # verify the tag signature information git verify-tag f7762cf803f03f5caf4b8078359a63783d0090c1 # gpg: Signature made Thu 30 Jul 2015 11:46:34 CEST using RSA key ID 4100DF6F # gpg: Good signature from \"VirtualTam <virtualtam@flibidi.net>\" [ultimate]","title":"Create and push a signed tag"},{"location":"dev/Release-Shaarli/#publish-the-github-release","text":"In the master banch, update version badges in README.md to point to the newly released Shaarli version Update the previously drafted release (notes, tag) and publish it Profit!","title":"Publish the GitHub release"},{"location":"dev/Release-Shaarli/#generate-full-release-zip-archives","text":"Release archives will contain Shaarli code plus all required third-party libraries. They are useful for users who: have no SSH access, no possibility to install PHP packages/server extensions, no possibility to run scripts (shared hosting) do not want to install build/dev dependencies on their server git checkout the appropriate branch, then: # checkout the appropriate branch git checkout 0.x.y # generate zip archives make release_archive This will create shaarli-v0.x.y-full.tar , shaarli-v0.x.y-full.zip . These archives need to be manually uploaded on the previously created GitHub release .","title":"Generate full release zip archives"},{"location":"dev/Release-Shaarli/#update-the-latest-branch","text":"# checkout the 'latest' branch git checkout latest # merge changes from your newly published release branch git merge v0.x.y # fix eventual conflicts with git mergetool... # run tests make test # push the latest branch git push upstream latest","title":"Update the latest branch"},{"location":"dev/Theming/","text":"Theming # Foreword # There are two ways of customizing how Shaarli looks: by using a custom CSS to override Shaarli's CSS by using a full theme that provides its own RainTPL templates, CSS and Javascript resources Custom CSS # Shaarli's appearance can be modified by adding CSS rules to: Shaarli < v0.9.0 : inc/user.css Shaarli >= v0.9.0 : data/user.css This file allows overriding rules defined in the template CSS files (only add changed rules), or define a whole new theme. Note : Do not edit tpl/default/css/shaarli.css ! Your changes would be overridden when updating Shaarli. Themes # Installation: find a theme you'd like to install copy or clone the theme folder under tpl/<a_sweet_theme> enable the theme: Shaarli < v0.9.0 : edit data/config.json.php and set the value of raintpl_tpl to the new theme name: \"raintpl_tpl\": \"tpl\\/my-template\\/\" Shaarli >= v0.9.0 : select the theme through the Tools page Community CSS & themes # Custom CSS # mrjovanovic/serious-theme-shaarli - A serious theme for Shaarli shaarli/shaarli-themes Themes # AkibaTech/Shaarli Superhero Theme - A template/theme for Shaarli alexisju/albinomouse-template - A full template for Shaarli ArthurHoaro/shaarli-launch - Customizable Shaarli theme dhoko/ShaarliTemplate - A template/theme for Shaarli kalvn/shaarli-blocks - A template/theme for Shaarli kalvn/Shaarli-Material - A theme (template) based on Google's Material Design for Shaarli, the superfast delicious clone ManufacturaInd/shaarli-2004licious-theme - A template/theme as a humble homage to the early looks of the del.icio.us site xfnw/shaarli-default-dark - The default theme but nice and dark for your eyeballs Shaarli forks # misterair/Limonade - A fork of (legacy) Shaarli with a new template vivienhaese/shaarlitheme - A Shaarli fork meant to be run in an openshift instance Example installation: AlbinoMouse theme # With the following configuration: Apache 2 / PHP 5.6 user sites are enabled, e.g. /home/user/public_html/somedir is served as http://localhost/~user/somedir http is the name of the Apache user $ cd ~/public_html # clone repositories $ git clone https://github.com/shaarli/Shaarli.git shaarli $ pushd shaarli/tpl $ git clone https://github.com/alexisju/albinomouse-template.git $ popd # set access rights for Apache $ chgrp -R http shaarli $ chmod g+rwx shaarli shaarli/cache shaarli/data shaarli/pagecache shaarli/tmp Get config written: - go to the freshly installed site - fill the install form - log in to Shaarli Edit Shaarli's configuration : # the file should be owned by Apache, thus not writeable => sudo $ sudo sed -i s=tpl=tpl/albinomouse-template=g shaarli/data/config.php","title":"Theming"},{"location":"dev/Theming/#theming","text":"","title":"Theming"},{"location":"dev/Theming/#foreword","text":"There are two ways of customizing how Shaarli looks: by using a custom CSS to override Shaarli's CSS by using a full theme that provides its own RainTPL templates, CSS and Javascript resources","title":"Foreword"},{"location":"dev/Theming/#custom-css","text":"Shaarli's appearance can be modified by adding CSS rules to: Shaarli < v0.9.0 : inc/user.css Shaarli >= v0.9.0 : data/user.css This file allows overriding rules defined in the template CSS files (only add changed rules), or define a whole new theme. Note : Do not edit tpl/default/css/shaarli.css ! Your changes would be overridden when updating Shaarli.","title":"Custom CSS"},{"location":"dev/Theming/#themes","text":"Installation: find a theme you'd like to install copy or clone the theme folder under tpl/<a_sweet_theme> enable the theme: Shaarli < v0.9.0 : edit data/config.json.php and set the value of raintpl_tpl to the new theme name: \"raintpl_tpl\": \"tpl\\/my-template\\/\" Shaarli >= v0.9.0 : select the theme through the Tools page","title":"Themes"},{"location":"dev/Theming/#community-css-themes","text":"","title":"Community CSS &amp; themes"},{"location":"dev/Theming/#custom-css_1","text":"mrjovanovic/serious-theme-shaarli - A serious theme for Shaarli shaarli/shaarli-themes","title":"Custom CSS"},{"location":"dev/Theming/#themes_1","text":"AkibaTech/Shaarli Superhero Theme - A template/theme for Shaarli alexisju/albinomouse-template - A full template for Shaarli ArthurHoaro/shaarli-launch - Customizable Shaarli theme dhoko/ShaarliTemplate - A template/theme for Shaarli kalvn/shaarli-blocks - A template/theme for Shaarli kalvn/Shaarli-Material - A theme (template) based on Google's Material Design for Shaarli, the superfast delicious clone ManufacturaInd/shaarli-2004licious-theme - A template/theme as a humble homage to the early looks of the del.icio.us site xfnw/shaarli-default-dark - The default theme but nice and dark for your eyeballs","title":"Themes"},{"location":"dev/Theming/#shaarli-forks","text":"misterair/Limonade - A fork of (legacy) Shaarli with a new template vivienhaese/shaarlitheme - A Shaarli fork meant to be run in an openshift instance","title":"Shaarli forks"},{"location":"dev/Theming/#example-installation-albinomouse-theme","text":"With the following configuration: Apache 2 / PHP 5.6 user sites are enabled, e.g. /home/user/public_html/somedir is served as http://localhost/~user/somedir http is the name of the Apache user $ cd ~/public_html # clone repositories $ git clone https://github.com/shaarli/Shaarli.git shaarli $ pushd shaarli/tpl $ git clone https://github.com/alexisju/albinomouse-template.git $ popd # set access rights for Apache $ chgrp -R http shaarli $ chmod g+rwx shaarli shaarli/cache shaarli/data shaarli/pagecache shaarli/tmp Get config written: - go to the freshly installed site - fill the install form - log in to Shaarli Edit Shaarli's configuration : # the file should be owned by Apache, thus not writeable => sudo $ sudo sed -i s=tpl=tpl/albinomouse-template=g shaarli/data/config.php","title":"Example installation: AlbinoMouse theme"},{"location":"dev/Translations/","text":"Translations # Shaarli supports gettext translations since >= v0.9.2 . Note that only the default theme supports translations. Contributing # We encourage the community to contribute to Shaarli translations, either by improving existing translations or submitting a new language. Contributing to the translation does not require software development knowledge. Please submit a pull request with the .po file updated/created. Note that the compiled file ( .mo ) is not stored on the repository, and is generated during the release process. How to # Install Poedit (used to extract strings to translate from the PHP source code, and generate .po files). Due to the usage of a template engine, it's important to generate PHP cache files to extract every translatable string. You can either use this script (recommended) or visit every template page in your browser to generate cache files, while logged in. Here is a list : http://<replace_domain>/ http://<replace_domain>/login http://<replace_domain>/daily http://<replace_domain>/tags/cloud http://<replace_domain>/tags/list http://<replace_domain>/picture-wall http://<replace_domain>/?nonope http://<replace_domain>/admin/add-shaare http://<replace_domain>/admin/password http://<replace_domain>/admin/tags http://<replace_domain>/admin/configure http://<replace_domain>/admin/tools http://<replace_domain>/admin/shaare http://<replace_domain>/admin/export http://<replace_domain>/admin/import http://<replace_domain>/admin/plugins Improve existing translations # In Poedit, click on \"Edit a Translation Open inc/languages/<lang>/LC_MESSAGES/shaarli.po under Shaarli's directory The existing list of translatable strings should load Click on the \"Update\" button. Start editing translations. Save when you're done, then you can submit a pull request containing the updated shaarli.po . Add a new language # In Poedit select \"Create New Translation\" Open inc/languages/<lang>/LC_MESSAGES/shaarli.po under Shaarli's directory Select the language you want to create. Click on File > Save as... , save your file in <shaarli directory>/inc/language/<new language>/LC_MESSAGES/shaarli.po ( <new language> here should be the language code respecting the ISO 3166-1 alpha-2 format in lowercase - e.g. de for German) Click on the \"Update\" button Start editing translations. Save when you're done, then you can submit a pull request containing the new shaarli.po . Theme translations # Theme translation extensions are loaded automatically if they're present. As a theme developer, all you have to do is to add the .po and .mo compiled file like this: tpl/<theme name>/language/<lang>/LC_MESSAGES/<theme name>.po tpl/<theme name>/language/<lang>/LC_MESSAGES/<theme name>.mo Where <lang> is the ISO 3166-1 alpha-2 language code. Read the following section \"Extend Shaarli's translation\" to learn how to generate those files. Extend Shaarli's translation # If you're writing a custom theme, or a non official plugin, you might want to use the translation system, but you won't be able to able to override Shaarli's translation. However, you can add your own translation domain which extends the main translation list. Note that you can find a live example of translation extension in the demo_plugin . First, create your translation files tree directory: <your_module>/languages/<ISO 3166-1 alpha-2 language code>/LC_MESSAGES/ Your .po files must be named like your domain. E.g. if your translation domain is my_theme , then your file will be my_theme.po . Users have to register your extension in their configuration with the parameter translation.extensions.<domain>: <translation files path> . Example: if (! $conf->exists('translation.extensions.my_theme')) { $conf->set('translation.extensions.my_theme', '<your_module>/languages/'); $conf->write(true); } Note that the page needs to be reloaded after the registration. It is then recommended to create a custom translation function which will call the t() function with your domain. For example : function my_theme_t($text, $nText = '', $nb = 1) { return t($text, $nText, $nb, 'my_theme'); // the last parameter is your translation domain. } All strings which can be translated should be processed through your function: my_theme_t('Comment'); my_theme_t('Comment', 'Comments', 2); Or in templates: {'Comment'|my_theme_t} {function=\"my_theme_t('Comment', 'Comments', 2)\"} Note than in template, you need to visit your page at least once to generate a cache file. When you're done, open Poedit and load translation strings from sources: File > New Choose your language Save your PO file in <your_module>/languages/<language code>/LC_MESSAGES/my_theme.po . Go to Catalog > Properties... Fill the Translation Properties tab Add your source path in the Sources Paths tab In the Sources Keywords tab uncheck \"Also use default keywords\" and add the following lines: my_theme_t my_theme_t:1,2 Click on the \"Update\" button and you're free to start your translations!","title":"Translations"},{"location":"dev/Translations/#translations","text":"Shaarli supports gettext translations since >= v0.9.2 . Note that only the default theme supports translations.","title":"Translations"},{"location":"dev/Translations/#contributing","text":"We encourage the community to contribute to Shaarli translations, either by improving existing translations or submitting a new language. Contributing to the translation does not require software development knowledge. Please submit a pull request with the .po file updated/created. Note that the compiled file ( .mo ) is not stored on the repository, and is generated during the release process.","title":"Contributing"},{"location":"dev/Translations/#how-to","text":"Install Poedit (used to extract strings to translate from the PHP source code, and generate .po files). Due to the usage of a template engine, it's important to generate PHP cache files to extract every translatable string. You can either use this script (recommended) or visit every template page in your browser to generate cache files, while logged in. Here is a list : http://<replace_domain>/ http://<replace_domain>/login http://<replace_domain>/daily http://<replace_domain>/tags/cloud http://<replace_domain>/tags/list http://<replace_domain>/picture-wall http://<replace_domain>/?nonope http://<replace_domain>/admin/add-shaare http://<replace_domain>/admin/password http://<replace_domain>/admin/tags http://<replace_domain>/admin/configure http://<replace_domain>/admin/tools http://<replace_domain>/admin/shaare http://<replace_domain>/admin/export http://<replace_domain>/admin/import http://<replace_domain>/admin/plugins","title":"How to"},{"location":"dev/Translations/#improve-existing-translations","text":"In Poedit, click on \"Edit a Translation Open inc/languages/<lang>/LC_MESSAGES/shaarli.po under Shaarli's directory The existing list of translatable strings should load Click on the \"Update\" button. Start editing translations. Save when you're done, then you can submit a pull request containing the updated shaarli.po .","title":"Improve existing translations"},{"location":"dev/Translations/#add-a-new-language","text":"In Poedit select \"Create New Translation\" Open inc/languages/<lang>/LC_MESSAGES/shaarli.po under Shaarli's directory Select the language you want to create. Click on File > Save as... , save your file in <shaarli directory>/inc/language/<new language>/LC_MESSAGES/shaarli.po ( <new language> here should be the language code respecting the ISO 3166-1 alpha-2 format in lowercase - e.g. de for German) Click on the \"Update\" button Start editing translations. Save when you're done, then you can submit a pull request containing the new shaarli.po .","title":"Add a new language"},{"location":"dev/Translations/#theme-translations","text":"Theme translation extensions are loaded automatically if they're present. As a theme developer, all you have to do is to add the .po and .mo compiled file like this: tpl/<theme name>/language/<lang>/LC_MESSAGES/<theme name>.po tpl/<theme name>/language/<lang>/LC_MESSAGES/<theme name>.mo Where <lang> is the ISO 3166-1 alpha-2 language code. Read the following section \"Extend Shaarli's translation\" to learn how to generate those files.","title":"Theme translations"},{"location":"dev/Translations/#extend-shaarlis-translation","text":"If you're writing a custom theme, or a non official plugin, you might want to use the translation system, but you won't be able to able to override Shaarli's translation. However, you can add your own translation domain which extends the main translation list. Note that you can find a live example of translation extension in the demo_plugin . First, create your translation files tree directory: <your_module>/languages/<ISO 3166-1 alpha-2 language code>/LC_MESSAGES/ Your .po files must be named like your domain. E.g. if your translation domain is my_theme , then your file will be my_theme.po . Users have to register your extension in their configuration with the parameter translation.extensions.<domain>: <translation files path> . Example: if (! $conf->exists('translation.extensions.my_theme')) { $conf->set('translation.extensions.my_theme', '<your_module>/languages/'); $conf->write(true); } Note that the page needs to be reloaded after the registration. It is then recommended to create a custom translation function which will call the t() function with your domain. For example : function my_theme_t($text, $nText = '', $nb = 1) { return t($text, $nText, $nb, 'my_theme'); // the last parameter is your translation domain. } All strings which can be translated should be processed through your function: my_theme_t('Comment'); my_theme_t('Comment', 'Comments', 2); Or in templates: {'Comment'|my_theme_t} {function=\"my_theme_t('Comment', 'Comments', 2)\"} Note than in template, you need to visit your page at least once to generate a cache file. When you're done, open Poedit and load translation strings from sources: File > New Choose your language Save your PO file in <your_module>/languages/<language code>/LC_MESSAGES/my_theme.po . Go to Catalog > Properties... Fill the Translation Properties tab Add your source path in the Sources Paths tab In the Sources Keywords tab uncheck \"Also use default keywords\" and add the following lines: my_theme_t my_theme_t:1,2 Click on the \"Update\" button and you're free to start your translations!","title":"Extend Shaarli's translation"},{"location":"dev/Unit-tests/","text":"Unit tests # Shaarli uses the PHPUnit test framework; it can be installed with Composer , which is a dependency management tool. Install composer # You can either use: a system-wide version, e.g. installed through your distro's package manager a local version, downloadable here . # for Debian-based distros sudo apt install composer Install Shaarli dev dependencies # After installing required PHP extensions , install development dependencies: $ cd /path/to/shaarli $ make composer_dependencies_dev Install and enable Xdebug to generate PHPUnit coverage reports # Xdebug is a PHP extension which provides debugging and profiling capabilities. Install Xdebug: # for Debian-based distros: sudo apt install php-xdebug # for ArchLinux: pacman -S xdebug # then add the following line to /etc/php/php.ini zend_extension=xdebug.so Run unit tests # Ensure tests pass successfully: make test # ... # OK (36 tests, 65 assertions) In case of failure the test suite will point you to actual errors and output a summary: make test # ... # FAILURES! # Tests: 36, Assertions: 63, Errors: 1, Failures: 2. By default, PHPUnit will run all suitable tests found under the tests directory. Each test has 3 possible outcomes: . - success F - failure: the test was run but its results are invalid the code does not behave as expected dependencies to external elements: globals, session, cache... E - error: something went wrong and the tested code has crashed typos in the code, or in the test code dependencies to missing external elements If Xdebug has been installed and activated, two coverage reports will be generated: a summary in the console a detailed HTML report with metrics for tested code to open it in a web browser: firefox coverage/index.html & Executing specific tests # Add a @group annotation in a test class or method comment: /** * Netscape bookmark import * @group WIP */ class BookmarkImportTest extends PHPUnit_Framework_TestCase { [...] } To run all tests annotated with @group WIP : $ vendor/bin/phpunit --group WIP tests/ Running tests inside Docker containers # Unit tests can be run inside Docker containers. Test Dockerfiles are located under tests/docker/<distribution>/Dockerfile , and can be used to build Docker images to run Shaarli test suites under commonLinux environments. Dockerfiles are provided for the following environments: alpine316 - Alpine Linux 3.16 debian8 - Debian 8 Jessie (oldoldstable) debian9 - Debian 9 Stretch (oldstable) ubuntu16 - Ubuntu 16.04 Xenial Xerus (old LTS) Each image provides: - a base Linux OS - Shaarli PHP dependencies (OS packages) - test PHP dependencies (OS packages) - Composer - Tests that run inside the container using a standard Linux user account (running tests as root would bypass permission checks and may hide issues) Build a test image: # build the Debian 9 Docker image cd /path/to/shaarli/tests/docker/debian9 docker build -t shaarli-test:debian9 . Run unit tests in a container: cd /path/to/shaarli # install/update 3rd-party test dependencies composer install --prefer-dist # run tests using the freshly built image docker run -v $PWD:/shaarli shaarli-test:debian9 docker_test # run the full test campaign docker run -v $PWD:/shaarli shaarli-test:debian9 docker_all_tests","title":"Unit tests"},{"location":"dev/Unit-tests/#unit-tests","text":"Shaarli uses the PHPUnit test framework; it can be installed with Composer , which is a dependency management tool.","title":"Unit tests"},{"location":"dev/Unit-tests/#install-composer","text":"You can either use: a system-wide version, e.g. installed through your distro's package manager a local version, downloadable here . # for Debian-based distros sudo apt install composer","title":"Install composer"},{"location":"dev/Unit-tests/#install-shaarli-dev-dependencies","text":"After installing required PHP extensions , install development dependencies: $ cd /path/to/shaarli $ make composer_dependencies_dev","title":"Install Shaarli dev dependencies"},{"location":"dev/Unit-tests/#install-and-enable-xdebug-to-generate-phpunit-coverage-reports","text":"Xdebug is a PHP extension which provides debugging and profiling capabilities. Install Xdebug: # for Debian-based distros: sudo apt install php-xdebug # for ArchLinux: pacman -S xdebug # then add the following line to /etc/php/php.ini zend_extension=xdebug.so","title":"Install and enable Xdebug to generate PHPUnit coverage reports"},{"location":"dev/Unit-tests/#run-unit-tests","text":"Ensure tests pass successfully: make test # ... # OK (36 tests, 65 assertions) In case of failure the test suite will point you to actual errors and output a summary: make test # ... # FAILURES! # Tests: 36, Assertions: 63, Errors: 1, Failures: 2. By default, PHPUnit will run all suitable tests found under the tests directory. Each test has 3 possible outcomes: . - success F - failure: the test was run but its results are invalid the code does not behave as expected dependencies to external elements: globals, session, cache... E - error: something went wrong and the tested code has crashed typos in the code, or in the test code dependencies to missing external elements If Xdebug has been installed and activated, two coverage reports will be generated: a summary in the console a detailed HTML report with metrics for tested code to open it in a web browser: firefox coverage/index.html &","title":"Run unit tests"},{"location":"dev/Unit-tests/#executing-specific-tests","text":"Add a @group annotation in a test class or method comment: /** * Netscape bookmark import * @group WIP */ class BookmarkImportTest extends PHPUnit_Framework_TestCase { [...] } To run all tests annotated with @group WIP : $ vendor/bin/phpunit --group WIP tests/","title":"Executing specific tests"},{"location":"dev/Unit-tests/#running-tests-inside-docker-containers","text":"Unit tests can be run inside Docker containers. Test Dockerfiles are located under tests/docker/<distribution>/Dockerfile , and can be used to build Docker images to run Shaarli test suites under commonLinux environments. Dockerfiles are provided for the following environments: alpine316 - Alpine Linux 3.16 debian8 - Debian 8 Jessie (oldoldstable) debian9 - Debian 9 Stretch (oldstable) ubuntu16 - Ubuntu 16.04 Xenial Xerus (old LTS) Each image provides: - a base Linux OS - Shaarli PHP dependencies (OS packages) - test PHP dependencies (OS packages) - Composer - Tests that run inside the container using a standard Linux user account (running tests as root would bypass permission checks and may hide issues) Build a test image: # build the Debian 9 Docker image cd /path/to/shaarli/tests/docker/debian9 docker build -t shaarli-test:debian9 . Run unit tests in a container: cd /path/to/shaarli # install/update 3rd-party test dependencies composer install --prefer-dist # run tests using the freshly built image docker run -v $PWD:/shaarli shaarli-test:debian9 docker_test # run the full test campaign docker run -v $PWD:/shaarli shaarli-test:debian9 docker_all_tests","title":"Running tests inside Docker containers"},{"location":"dev/Versioning/","text":"Versioning # If you're maintaining a 3rd party tool for Shaarli (theme, plugin, etc.), It's important to understand how Shaarli branches work ensure your tool stays compatible. master branch # The master branch is the development branch. Any new change MUST go through this branch using Pull Requests. Remarks: This branch shouldn't be used for production as it isn't necessary stable. 3rd party aren't required to be compatible with the latest changes. Official plugins, themes and libraries (contained within Shaarli organization repos) must be compatible with the master branch. v0.x branch # The v0.x branch points to the latest v0.x.y release. If a major bug affects the original v0.x.0 release, we may backport a fix for this bug from master, to the v0.x branch, and create a new bugfix release (eg. v0.x.1 ) from this branch. This allows users of the original release to upgrade to the fixed version, without having to upgrade to a completely new minor/major release. latest branch # This branch point the latest release. It recommended to use it to get the latest tested changes. Releases # For every release, we manually generate a .zip file which contains all Shaarli dependencies, making Shaarli's installation only one step. Advices on 3rd party git repos workflow # Versioning # Any time a new Shaarli release is published, you should publish a new release of your repo if the changes affected you since the latest release (take a look at the changelog ( Draft means not released yet) and the commit log (like tpl folder for themes)). You can either: use the Shaarli version number, with your repo version. For example, if Shaarli v0.8.3 is released, publish a v0.8.3-1 release, where v0.8.3 states Shaarli compatibility and -1 is your own version digit for the current Shaarli version. use your own versioning scheme, and state Shaarli compatibility in the release description. Using this, any user will be able to pick the release matching his own Shaarli version. Major bugfix backport releases # To be able to support backported fixes, it recommended to use our workflow: # In master, fix the major bug git commit -m \"Katastrophe\" git push origin master # Get your commit hash git log --format=\"%H\" -n 1 # Create a new branch from your latest release, let's say v0.8.2-1 (the tag name) git checkout -b katastrophe v0.8.2-1 # Backport the fix commit to your brand new branch git cherry-pick <fix commit hash> git push origin katastrophe # Then you just have to make a new release from the `katastrophe` branch tagged `v0.8.3-1`","title":"Versioning"},{"location":"dev/Versioning/#versioning","text":"If you're maintaining a 3rd party tool for Shaarli (theme, plugin, etc.), It's important to understand how Shaarli branches work ensure your tool stays compatible.","title":"Versioning"},{"location":"dev/Versioning/#master-branch","text":"The master branch is the development branch. Any new change MUST go through this branch using Pull Requests. Remarks: This branch shouldn't be used for production as it isn't necessary stable. 3rd party aren't required to be compatible with the latest changes. Official plugins, themes and libraries (contained within Shaarli organization repos) must be compatible with the master branch.","title":"master branch"},{"location":"dev/Versioning/#v0x-branch","text":"The v0.x branch points to the latest v0.x.y release. If a major bug affects the original v0.x.0 release, we may backport a fix for this bug from master, to the v0.x branch, and create a new bugfix release (eg. v0.x.1 ) from this branch. This allows users of the original release to upgrade to the fixed version, without having to upgrade to a completely new minor/major release.","title":"v0.x branch"},{"location":"dev/Versioning/#latest-branch","text":"This branch point the latest release. It recommended to use it to get the latest tested changes.","title":"latest branch"},{"location":"dev/Versioning/#releases","text":"For every release, we manually generate a .zip file which contains all Shaarli dependencies, making Shaarli's installation only one step.","title":"Releases"},{"location":"dev/Versioning/#advices-on-3rd-party-git-repos-workflow","text":"","title":"Advices on 3rd party git repos workflow"},{"location":"dev/Versioning/#versioning_1","text":"Any time a new Shaarli release is published, you should publish a new release of your repo if the changes affected you since the latest release (take a look at the changelog ( Draft means not released yet) and the commit log (like tpl folder for themes)). You can either: use the Shaarli version number, with your repo version. For example, if Shaarli v0.8.3 is released, publish a v0.8.3-1 release, where v0.8.3 states Shaarli compatibility and -1 is your own version digit for the current Shaarli version. use your own versioning scheme, and state Shaarli compatibility in the release description. Using this, any user will be able to pick the release matching his own Shaarli version.","title":"Versioning"},{"location":"dev/Versioning/#major-bugfix-backport-releases","text":"To be able to support backported fixes, it recommended to use our workflow: # In master, fix the major bug git commit -m \"Katastrophe\" git push origin master # Get your commit hash git log --format=\"%H\" -n 1 # Create a new branch from your latest release, let's say v0.8.2-1 (the tag name) git checkout -b katastrophe v0.8.2-1 # Backport the fix commit to your brand new branch git cherry-pick <fix commit hash> git push origin katastrophe # Then you just have to make a new release from the `katastrophe` branch tagged `v0.8.3-1`","title":"Major bugfix backport releases"}]}